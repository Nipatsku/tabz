{"version":3,"sources":["components/startMenu/SongList.tsx","components/startMenu/SongSelector.tsx","components/displaySong/VersionSelector.tsx","components/displaySong/SongContent.tsx","components/displaySong/AutoScrollConfig.tsx","components/displaySong/DisplaySong.tsx","components/common/LoadingIndicator.tsx","components/startMenu/StartMenu.tsx","index.tsx"],"names":["TreeNode","Tree","SongList","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","onSelectTreeNode","selectedKeys","_this$props","props","songList","onSelectSong","selectedTreeNodeKey","selectedSong","find","songInfo","getSongAsTreeKey","artist","name","inherits","createClass","key","value","_this2","_this$props2","searchString","songsSortedBySearchString","map","item","sort","SearchStringSorter","react","lib","itemLayout","dataSource","renderItem","Item","onClick","Meta","title","songsByArtist","mapSongsByArtist","artistSongs","sortSongsByName","showIcon","switcherIcon","type","onSelect","iArtist","song","React","_songSimilarity","toLowerCase","startsWith","includes","_searchString","a","b","aScore","bScore","songs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","added","_i","_songsByArtist","push","err","return","textA","toUpperCase","textB","SongSelector","onSearchSong","setState","state","Title","Search","placeholder","enterButton","size","onChange","e","target","allowClear","SongList_SongList","VersionSelector","Typography","Text","defaultSelectedVersion","onSelectVersion","style","versions","version","i","SongContent","Paragraph","touchStartTime","onDoubleClick","onTouchStart","window","performance","now","onTouchEnd","contentRows","content","split","row","className","AutoScrollConfig","enabled","onToggle","mouseEnterDelay","DisplaySong","songContentRef","m","selectedVersion","goToBeginning","animateScroll","scrollToTop","onToggleAutoScroll","autoScrollActive","updateAutoScroll","scrollBy","setTimeout","returnToPrevious","_this$state","DisplaySong_Title","level","VersionSelector_VersionSelector","display","offsetTop","float","AutoScrollConfig_AutoScrollConfig","SongContent_SongContent","ref","LoadingIndicator","StartMenu","onClickSelectSong","subState","id","getFullSongInfo","then","objectSpread","partialSongInfo","fetch","r","json","url","SongSelector_SongSelector","LoadingIndicator_LoadingIndicator","DisplaySong_DisplaySong","App","StartMenu_StartMenu","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.cdc559f9.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { Tree, Icon, List } from \"antd/lib\"\r\nconst { TreeNode } = Tree\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    searchString?: string\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\ninterface State {}\r\ntype SongSorter = (a: SongInfo, b: SongInfo) => 1 | -1 | 0\r\nexport class SongList extends React.Component<Props, State> {\r\n    onSelectTreeNode = (selectedKeys: string[]) => {\r\n        const { songList, onSelectSong } = this.props\r\n        const selectedTreeNodeKey = selectedKeys[0]\r\n\r\n        // Check if selected Node was a song.\r\n        const selectedSong = songList.find((songInfo) =>\r\n            this.getSongAsTreeKey(songInfo) === selectedTreeNodeKey\r\n        )\r\n        if (selectedSong)\r\n            onSelectSong(selectedSong)\r\n    }\r\n    getSongAsTreeKey = (songInfo: SongInfo) => `${songInfo.artist} - ${songInfo.name}`\r\n    render() {\r\n        const { songList, searchString, onSelectSong } = this.props\r\n        if (! searchString) {\r\n            const songsByArtist = mapSongsByArtist(songList)\r\n                .map((artistSongs) => artistSongs.sort(sortSongsByName))\r\n            return <Tree\r\n                showIcon\r\n                switcherIcon={<Icon type=\"down\" />}\r\n                onSelect={this.onSelectTreeNode}\r\n            >\r\n                {songsByArtist.map((artistSongs, iArtist) => {\r\n                    const key = `${iArtist}`\r\n                    return <TreeNode\r\n                        key={key}\r\n                        title={artistSongs[0].artist}\r\n                        // icon= TODO\r\n                    >\r\n                        {artistSongs.map((song) =>\r\n                            <TreeNode\r\n                                key={this.getSongAsTreeKey(song)}\r\n                                title={song.name}\r\n                            />\r\n                        )}\r\n                    </TreeNode>\r\n                })}\r\n            </Tree>\r\n        } else {\r\n            const songsSortedBySearchString = songList\r\n                // Copy Array.\r\n                .map((item) => item)\r\n                .sort(SearchStringSorter(searchString))\r\n            return <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={songsSortedBySearchString}\r\n                renderItem={(songInfo) => (\r\n                    <List.Item\r\n                        onClick={() => onSelectSong(songInfo)}\r\n                    >\r\n                        <List.Item.Meta\r\n                            title={`${songInfo.artist} - ${songInfo.name}`}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        }\r\n    }\r\n}\r\nconst _songSimilarity = (songInfo: SongInfo, searchString: string): number => {\r\n    const name = songInfo.name.toLowerCase()\r\n    const artist = songInfo.artist.toLowerCase()\r\n    return (name.startsWith(searchString) || artist.startsWith(searchString)) ?\r\n            1 :\r\n            (name.includes(searchString) || artist.includes(searchString) ?\r\n                0.5 :\r\n                0\r\n            )\r\n}\r\nconst SearchStringSorter = (_searchString: string): SongSorter => {\r\n    const searchString = _searchString.toLowerCase()\r\n    return (a, b) => {\r\n        const aScore = _songSimilarity(a, searchString)\r\n        const bScore = _songSimilarity(b, searchString)\r\n        return (aScore < bScore) ? 1 : (aScore > bScore) ? -1 : 0\r\n    }\r\n}\r\nconst mapSongsByArtist = (songs: SongInfo[]): SongInfo[][] => {\r\n    const songsByArtist: SongInfo[][] = []\r\n    for (const song of songs) {\r\n        // Check for existing item with same artist.\r\n        let added = false\r\n        for (const artistSongs of songsByArtist)\r\n            if (artistSongs[0].artist === song.artist) {\r\n                artistSongs.push(song)\r\n                added = true\r\n            }\r\n        if (!added)\r\n            songsByArtist.push([song])\r\n    }\r\n    return songsByArtist\r\n}\r\nconst sortSongsByName = (a: SongInfo, b: SongInfo): -1 | 1 | 0 => {\r\n    const textA = a.name.toUpperCase()\r\n    const textB = b.name.toUpperCase()\r\n    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n}\r\n","\r\nimport * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { SongList } from \"./SongList\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\ninterface State {\r\n    searchString?: string\r\n}\r\nexport class SongSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onSearchSong = (value: string) => {\r\n        this.setState({\r\n            searchString: value.length > 0 ?\r\n                value : undefined\r\n        })\r\n    }\r\n    render() {\r\n        const { songList, onSelectSong } = this.props\r\n        const { searchString } = this.state\r\n        return <div>\r\n            <Typography.Title>Select song</Typography.Title>\r\n            <Input.Search\r\n                placeholder=\"Search text\"\r\n                enterButton=\"Search\"\r\n                size=\"default\"\r\n                onChange={(e) => this.onSearchSong(e.target.value)}\r\n                allowClear={true}\r\n            />\r\n            <SongList\r\n                songList={songList}\r\n                searchString={searchString}\r\n                onSelectSong={onSelectSong}\r\n            />\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    defaultSelectedVersion: SongVersion\r\n    onSelectVersion: (version: SongVersion) => void\r\n    style?: React.CSSProperties\r\n}\r\ninterface State {}\r\nexport class VersionSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { song, defaultSelectedVersion, onSelectVersion, style } = this.props\r\n        const { versions } = song\r\n        return <div\r\n            style={style}\r\n        >\r\n            {versions.length > 1 &&\r\n                <div>\r\n                    {versions.map((version, i) =>\r\n                        <Button\r\n                            key={`${i}`}\r\n                            onClick={() => onSelectVersion(version)}\r\n                            type={version === defaultSelectedVersion ?\r\n                                'primary' : 'default'\r\n                            }\r\n                        >\r\n                            {version.name}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n}","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Row, Col } from \"antd/lib\"\r\nconst { Title, Text, Paragraph } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    version: SongVersion\r\n    onClick: () => void\r\n}\r\ninterface State {}\r\nexport class SongContent extends React.Component<Props, State> {\r\n\r\n    touchStartTime?: number\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onDoubleClick = () => {\r\n        this.props.onClick()\r\n    }\r\n    onTouchStart = () => {\r\n        this.touchStartTime = window.performance.now()\r\n    }\r\n    onTouchEnd = () => {\r\n        const tDelta = window.performance.now() - (this.touchStartTime as number)\r\n        if (tDelta <= 150) {\r\n            this.props.onClick()\r\n        }\r\n    }\r\n    render() {\r\n        const { version } = this.props\r\n        const contentRows = version.content.split('\\n')\r\n        return <div\r\n            onDoubleClick={this.onDoubleClick}\r\n            onTouchStart={this.onTouchStart}\r\n            onTouchEnd={this.onTouchEnd}\r\n        >\r\n            {contentRows.map((row, i) => \r\n                <pre\r\n                    key={i}\r\n                    className='song-content'\r\n                >\r\n                    {row}\r\n                </pre>\r\n            )}\r\n        </div>\r\n    }\r\n}","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Tooltip } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    enabled: boolean\r\n    onToggle: () => void\r\n}\r\ninterface State {}\r\nexport class AutoScrollConfig extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { enabled, onToggle } = this.props\r\n        return <div>\r\n            <Tooltip\r\n                title=\"Also activated by poking / double-clicking !\"\r\n                mouseEnterDelay={1}\r\n            >\r\n                <Button\r\n                    onClick={onToggle}\r\n                    type={enabled ? 'primary':'default'}\r\n                >\r\n                    {`Autoscroll ${ enabled ? 'ON' : 'OFF' }`}\r\n                </Button>\r\n            </Tooltip>\r\n        </div>\r\n    }\r\n}","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Affix } from \"antd/lib\"\r\nimport { VersionSelector } from './VersionSelector'\r\nimport { SongContent } from './SongContent'\r\nimport { AutoScrollConfig } from './AutoScrollConfig'\r\nimport { Link, animateScroll } from 'react-scroll'\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    returnToPrevious: () => void\r\n}\r\ninterface State {\r\n    selectedVersion: SongVersion\r\n    autoScrollActive: boolean\r\n}\r\nexport class DisplaySong extends React.Component<Props, State> {\r\n\r\n    songContentRef?: SongContent | null\r\n    m: boolean = false\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedVersion: this.props.song.versions[0],\r\n            autoScrollActive: false\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.m = true\r\n        setTimeout(this.updateAutoScroll)\r\n    }\r\n    componentWillUnmount() {\r\n        this.m = false\r\n    }\r\n    onSelectVersion = (selectedVersion: SongVersion) => {\r\n        this.setState({\r\n            selectedVersion\r\n        })\r\n    }\r\n    goToBeginning = () => {\r\n        animateScroll.scrollToTop()\r\n    }\r\n    onToggleAutoScroll = () => {\r\n        this.setState({\r\n            autoScrollActive: !this.state.autoScrollActive\r\n        })\r\n    }\r\n    updateAutoScroll = () => {\r\n        if (!this.m)\r\n            return\r\n\r\n        if (this.state.autoScrollActive) {\r\n            window.scrollBy(0, 1)\r\n            setTimeout(this.updateAutoScroll, 50)\r\n        } else\r\n            setTimeout(this.updateAutoScroll, 100)\r\n    }\r\n    render() {\r\n        const { song, returnToPrevious } = this.props\r\n        const { selectedVersion, autoScrollActive } = this.state\r\n        return <div>\r\n            <Title>{song.artist}</Title>\r\n            <Title level={2}>{song.name}</Title>\r\n            <div>\r\n                <VersionSelector\r\n                    song={song}\r\n                    defaultSelectedVersion={selectedVersion}\r\n                    onSelectVersion={this.onSelectVersion}\r\n                    style={{ display: 'inline-block' }}\r\n                />\r\n                <Affix\r\n                    offsetTop={0}\r\n                    style={{\r\n                        float: 'right'\r\n                    }}\r\n                >\r\n                    <AutoScrollConfig\r\n                        enabled={autoScrollActive}\r\n                        onToggle={this.onToggleAutoScroll}\r\n                    />\r\n                </Affix>\r\n            </div>\r\n            <SongContent\r\n                ref={(ref) => this.songContentRef = ref}\r\n                song={song}\r\n                version={selectedVersion}\r\n                onClick={this.onToggleAutoScroll}\r\n            />\r\n            <br/>\r\n            <div>\r\n                <Button\r\n                    onClick={this.goToBeginning}\r\n                >\r\n                    To beginning\r\n                </Button>\r\n                <Button\r\n                    onClick={returnToPrevious}\r\n                >\r\n                    To song selection\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class LoadingIndicator extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absolute-center\"\r\n        />\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song } from \"../../datastructures/song\";\r\nimport { SongSelector } from \"./SongSelector\";\r\nimport { DisplaySong } from \"../displaySong/DisplaySong\";\r\nimport { LoadingIndicator } from '../common/LoadingIndicator'\r\nimport { Button, Layout, Typography, Icon } from \"antd/lib\";\r\n\r\n/**\r\n *\r\n */\r\ninterface Props {}\r\n/**\r\n *\r\n */\r\ninterface State {\r\n    /**\r\n     *\r\n     */\r\n    songList?: SongInfo[];\r\n    /**\r\n     *\r\n     */\r\n    subState:\r\n        {\r\n            id: \"none\"\r\n        } |\r\n        {\r\n            id: \"select-song\"\r\n        } |\r\n        {\r\n            id: \"display-song\",\r\n            partialSongInfo: SongInfo,\r\n            song?: Song,\r\n        };\r\n}\r\n/**\r\n *\r\n */\r\nexport class StartMenu extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        // Read song list.\r\n        fetch(\"content/list.json\")\r\n            .then((r) => r.json())\r\n            .then((songList) => this.setState({ songList }))\r\n            // .then(() => {\r\n            //     const songList = this.state.songList as SongInfo[]\r\n            //     const partialSongInfo = songList.find((songInfo) => songInfo.name.includes('Nice Guy')) as SongInfo\r\n            //     this.getFullSongInfo(partialSongInfo)\r\n            //         .then((song) => {\r\n            //             this.setState({\r\n            //                 subState: {\r\n            //                     id: 'display-song',\r\n            //                     partialSongInfo,\r\n            //                     song\r\n            //                 }\r\n            //             })\r\n            //         })\r\n            // })\r\n        this.state = {\r\n            subState: {id: \"none\"},\r\n        };\r\n    }\r\n    getFullSongInfo(partialSongInfo: SongInfo): Promise<Song> {\r\n        return fetch(partialSongInfo.url)\r\n            .then((r) => r.json());\r\n    }\r\n    onClickSelectSong = () => {\r\n        this.setState({\r\n            subState: { id: \"select-song\" },\r\n        });\r\n    }\r\n    onSelectSong = (songInfo: SongInfo) => {\r\n        this.getFullSongInfo(songInfo)\r\n            .then((song) => {\r\n                const { subState } = this.state;\r\n                if (subState.id === \"display-song\") {\r\n                    this.setState({\r\n                        subState: {\r\n                            ...subState,\r\n                            song\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        this.setState({\r\n            subState: {\r\n                id: \"display-song\",\r\n                partialSongInfo: songInfo,\r\n            },\r\n        });\r\n    }\r\n    render() {\r\n        const { songList, subState } = this.state;\r\n        switch (subState.id) {\r\n            case \"none\":\r\n                return <div>\r\n                    <Typography.Title>\r\n                        Tabz for days - React version\r\n                    </Typography.Title>\r\n                    <Button\r\n                        onClick={this.onClickSelectSong}\r\n                    >Select song</Button>\r\n                </div>;\r\n            case \"select-song\":\r\n                return songList ? <SongSelector\r\n                        songList={songList}\r\n                        onSelectSong={this.onSelectSong}\r\n                    ></SongSelector>\r\n                    :\r\n                    <LoadingIndicator/>;\r\n            case \"display-song\":\r\n                return subState.song ? <DisplaySong\r\n                    song={subState.song}\r\n                    returnToPrevious={() => {\r\n                        this.setState({\r\n                            subState: { id: \"select-song\" }\r\n                        })\r\n                    }}\r\n                />\r\n                :\r\n                <LoadingIndicator/>;\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { StartMenu } from \"./components/startMenu/StartMenu\"\r\n\r\nimport \"./styles.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <StartMenu />\r\n    )\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}