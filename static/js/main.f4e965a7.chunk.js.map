{"version":3,"sources":["components/common/common.ts","utils.ts","components/selectSong/SongList.tsx","components/common/LoadingIndicator.tsx","components/selectSong/SelectSong.tsx","components/displaySong/VersionSelector.tsx","components/displaySong/SongContent.tsx","datastructures/autoScroll.ts","components/displaySong/AutoScrollConfig.tsx","components/displaySong/DisplaySong.tsx","components/NotFound.tsx","index.tsx"],"names":["toString","fromString","lerp","amount","min","max","useLocalStorageItem","key","defaultValue","parser","_iLocalStorage","injectable","normalValue","initialValue","iLocalStorage","localStorage","undefined","inject","storedValue","getItem","_useState","useState","_useState2","Object","slicedToArray","value","setValue","handleChange","newValue","setItem","ParseString","Boolean","bool","str","TreeNode","Tree","SongList","props","songsByArtist","songList","searchString","onSelectSong","groupByArtist","localStorageKey_groupByArtist","handleSelectTreeNode","selectedKeys","selectedTreeNodeKey","selectedSong","find","songInfo","id","renderSongList","songs","react_default","a","createElement","lib","showIcon","onSelect","map","song","title","concat","name","artist","className","defaultChecked","onChange","mapSongsByArtist","sort","sortArtistsByName","artistSongs","sortSongsByName","switcherIcon","type","iArtist","length","item","SearchStringSorter","_songSimilarity","toLowerCase","startsWith","includes","_searchString","b","aScore","bScore","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","added","_i","_songsByArtist","push","err","return","textA","toUpperCase","textB","SortByName","LoadingIndicator","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","react","size","React","SelectSong","_this","call","onSearchSong","setState","history","url","fetch","process","then","r","json","errorMsg","match","params","message","error","replace","state","window","scrollTo","_this2","LoadingIndicator_LoadingIndicator","Title","Search","placeholder","e","target","allowClear","VersionSelector","Typography","Text","_this$props","defaultSelectedVersion","onSelectVersion","versions","version","i","onClick","SongContent","Paragraph","touchStartTime","touchStartLocation","onDoubleClick","onTouchStart","performance","now","x","changedTouches","clientX","y","clientY","onTouchEnd","tDelta","pDelta","pDeltaDist","Math","sqrt","pow","contentRows","content","split","row","AutoScrollValues","default","_SongAutoScrollSpeedID","getSongAutoScrollSpeed","savedPreference","Number","duration","saveSongAutoScrollSpeed","autoScrollSpeed","mStorage","storage","String","AutoScrollConfig","onSliderChange","onSetSpeed","_sliderValueToAutoScrollSpeed","afterSliderChange","songVersion","enabled","onToggle","mouseEnterDelay","_autoScrollSpeedToSliderValue","marks","defineProperty","onAfterChange","AutoScrollConfig_Text","floor","sliderValue","DisplaySong","scrollDivRef","isCurrentlyMounted","lastAutoScrollUpdate","scrollingFractions","selectedVersionIndex","uri","goToBeginning","animateScroll","scrollToTop","onToggleAutoScroll","autoScrollActive","onSetAutoScrollSpeed","returnToPreviousMenu","updateAutoScroll","tNow","divBounds","getBoundingClientRect","scrollAmount","bottom","top","innerHeight","scrollAmountInteger","scrollAmountFraction","scrollBy","requestAnimationFrame","catch","selectVersionFromProps","clbk","setTimeout","selectedVersion","_this$state","ref","DisplaySong_Title","level","VersionSelector_VersionSelector","offsetTop","AutoScrollConfig_AutoScrollConfig","color","instrument","tuning","SongContent_SongContent","NotFound","NotFound_Text","App","bgUrl","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","react_router_dom","basename","react_router","exact","path","component","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.f4e965a7.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport { Injectable, inject } from \"../../utils\";\r\n\r\ninterface StringParser<T> {\r\n    toString: (value: T) => string\r\n    fromString: (stringValue: string) => T\r\n}\r\nconst stringParser = <T>(\r\n    toString: (value: T) => string,\r\n    fromString: (stringValue: string) => T\r\n): StringParser<T> => ({ toString, fromString })\r\n/**\r\n * Hook for a generic primitive variable stored in localStorage.\r\n *\r\n * Does not crash when localStorage is not available.\r\n * @param key               Key in localStorage\r\n * @param defaultValue      Default value when a) localStorage is not available or b) localStorage is not initialized\r\n * @param parser            StringParser for the primitive type in question\r\n * @param iLocalStorage     localStorage injection interface for testing.\r\n */\r\nexport const useLocalStorageItem = <T>(\r\n    key: string,\r\n    defaultValue: T,\r\n    parser: StringParser<T>,\r\n    _iLocalStorage?: Injectable<Storage>\r\n) => {\r\n    // localStorage is not defined in test environment, so callback must be used.\r\n    const iLocalStorage = inject(_iLocalStorage, () => localStorage)\r\n\r\n    let initialValue: T\r\n    if (iLocalStorage !== undefined) {\r\n        // localStorage is available.\r\n        // Read initial value from localStorage.\r\n        const storedValue = iLocalStorage.getItem(key)\r\n        initialValue = (storedValue === null) ?\r\n            defaultValue :\r\n            parser.fromString(storedValue)\r\n    } else {\r\n        // localStorage is not available.\r\n        initialValue = defaultValue\r\n    }\r\n    const [value, setValue] = useState(initialValue)\r\n    function handleChange(newValue: T) {\r\n        setValue(newValue)\r\n        if (iLocalStorage !== undefined) {\r\n            // Update value in localStorage.\r\n            iLocalStorage.setItem(key, parser.toString(newValue))\r\n        }\r\n    }\r\n    return {\r\n        value,\r\n        handleChange\r\n    }\r\n}\r\nexport const ParseString = {\r\n    Boolean: stringParser(\r\n        (bool) => bool === true ? \"true\" : \"false\",\r\n        (str) => str === \"true\" ? true : false\r\n    ) as StringParser<boolean>\r\n}\r\n","\r\n/**\r\n *\r\n */\r\nexport const lerp = (amount: number, min: number, max: number): number =>\r\n    min + amount * (max - min)\r\n/**\r\n * Pure function for *flattening* Arrays.\r\n */\r\nexport const flatten = <T> (arrayOfArrays: T[][]): T[] => {\r\n    const arr: T[] = []\r\n    const len = arrayOfArrays.length\r\n    for (let i = 0; i < len; i ++) {\r\n        const arr2 = arrayOfArrays[i]\r\n        const len2  = arr2.length\r\n        for (let i2 = 0; i2 < len2; i2 ++)\r\n            arr.push(arr2[len2])\r\n    }\r\n    return arr\r\n}\r\n/**\r\n *\r\n */\r\nexport type Injectable<T> = undefined | { inject: T }\r\n/**\r\n *\r\n */\r\nexport const inject = <T>(injectable: Injectable<T>, normalValue: T | (() => T)): T => {\r\n    if (injectable === undefined)\r\n        return typeof normalValue === \"function\" ? (normalValue as () => T)() : normalValue\r\n    else\r\n        return injectable.inject\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { Tree, Icon, List, Typography, Checkbox } from \"antd/lib\"\r\nimport { useLocalStorageItem, ParseString } from \"../common/common\"\r\nconst { TreeNode } = Tree\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    searchString?: string\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\nexport default function SongList(props: Props) {\r\n    const { songList, searchString, onSelectSong } = props\r\n\r\n    const groupByArtist = useLocalStorageItem(\r\n        localStorageKey_groupByArtist,\r\n        false,\r\n        ParseString.Boolean\r\n    )\r\n    function handleGroupByArtistChange() {\r\n        groupByArtist.handleChange(!groupByArtist.value)\r\n    }\r\n\r\n    function handleSelectTreeNode(selectedKeys: string[]) {\r\n        const selectedTreeNodeKey = selectedKeys[0]\r\n\r\n        // Check if selected Node was a song.\r\n        const selectedSong = songList.find((songInfo) =>\r\n            songInfo.id === selectedTreeNodeKey\r\n        )\r\n        if (selectedSong)\r\n            onSelectSong(selectedSong)\r\n    }\r\n\r\n    function renderSongTree(songsByArtist: SongInfo[][]): JSX.Element {\r\n        return <Tree\r\n            showIcon\r\n            switcherIcon={<Icon type=\"down\" />}\r\n            onSelect={handleSelectTreeNode}\r\n        >\r\n            {songsByArtist.map((artistSongs, iArtist) => {\r\n                const key = `${iArtist}`\r\n                return <TreeNode\r\n                    key={key}\r\n                    title={`${artistSongs[0].artist} (${artistSongs.length})`}\r\n                >\r\n                    {artistSongs.map((song) =>\r\n                        <TreeNode\r\n                            key={song.id}\r\n                            title={`${song.name}`}\r\n                        />\r\n                    )}\r\n                </TreeNode>\r\n            })}\r\n        </Tree>\r\n    }\r\n    function renderSongList(songs: SongInfo[]): JSX.Element {\r\n        return <Tree\r\n            showIcon\r\n            onSelect={handleSelectTreeNode}\r\n        >\r\n            {songs.map((song) => <TreeNode\r\n                    key={song.id}\r\n                    title={`${song.name} - ${song.artist}`}\r\n            />)}\r\n        </Tree>\r\n    }\r\n    return (<div>\r\n        <div\r\n            className=\"groupByArtistDiv transparentBackground\"\r\n        >\r\n            <Checkbox\r\n                className=\"groupByArtistCheckbox transparentText\"\r\n                defaultChecked={groupByArtist.value}\r\n                onChange={handleGroupByArtistChange}\r\n            >\r\n                Group by artist\r\n            </Checkbox>\r\n        </div>\r\n        {\r\n            ((searchString === undefined) ? (\r\n                ((groupByArtist.value) ? (\r\n                    renderSongTree(\r\n                        mapSongsByArtist(songList)\r\n                            .sort(sortArtistsByName)\r\n                            .map((artistSongs) => artistSongs.sort(sortSongsByName))\r\n                    )\r\n                ) : (\r\n                    renderSongList(\r\n                        songList.sort(sortSongsByName)\r\n                    )\r\n                ))\r\n            ) : (\r\n                renderSongList(\r\n                    songList\r\n                        // Copy Array.\r\n                        .map((item) => item)\r\n                        .sort(SearchStringSorter(searchString))\r\n                )\r\n            ))\r\n        }\r\n    </div>)\r\n}\r\n\r\nconst localStorageKey_groupByArtist = \"groupByArtist\"\r\nconst _songSimilarity = (songInfo: SongInfo, searchString: string): number => {\r\n    const name = songInfo.name.toLowerCase()\r\n    const artist = songInfo.artist.toLowerCase()\r\n    return (name.startsWith(searchString)) ?\r\n        4 :\r\n        (artist.startsWith(searchString) ?\r\n            3 :\r\n            (name.includes(searchString) ?\r\n                2 :\r\n                (artist.includes(searchString) ?\r\n                    1 :\r\n                    0\r\n                )\r\n            )\r\n        )\r\n}\r\nconst SearchStringSorter = (_searchString: string) => {\r\n    const searchString = _searchString.toLowerCase()\r\n    return (a: SongInfo, b: SongInfo) => {\r\n        const aScore = _songSimilarity(a, searchString)\r\n        const bScore = _songSimilarity(b, searchString)\r\n        return (aScore < bScore) ? 1 : (aScore > bScore) ? -1 : 0\r\n    }\r\n}\r\nconst mapSongsByArtist = (songs: SongInfo[]): SongInfo[][] => {\r\n    const songsByArtist: SongInfo[][] = []\r\n    for (const song of songs) {\r\n        // Check for existing item with same artist.\r\n        let added = false\r\n        for (const artistSongs of songsByArtist)\r\n            if (artistSongs[0].artist === song.artist) {\r\n                artistSongs.push(song)\r\n                added = true\r\n            }\r\n        if (!added)\r\n            songsByArtist.push([song])\r\n    }\r\n    return songsByArtist\r\n        .sort((a, b) => {\r\n            const textA = a[0].artist.toUpperCase()\r\n            const textB = b[0].artist.toUpperCase()\r\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n        })\r\n}\r\n/**\r\n * Sorter factory for objects with names.\r\n */\r\nconst SortByName = function<T>(name: (o: T) => string) {\r\n    return (a: T, b: T): -1 | 1 | 0 => {\r\n        const textA = name(a).toUpperCase()\r\n        const textB = name(b).toUpperCase()\r\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n    }\r\n}\r\nconst sortSongsByName = SortByName<SongInfo>((songInfo) => songInfo.name)\r\nconst sortArtistsByName = SortByName<SongInfo[]>((artistSongs) => artistSongs[0].artist)\r\n","import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class LoadingIndicator extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absoluteCenter\"\r\n        />\r\n    }\r\n}\r\n","\r\nimport * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport SongList from \"./SongList\"\r\nimport { Button, Layout, Typography, Icon, Input, message } from \"antd/lib\"\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\";\r\nimport { Navigatable } from \"../common/navigation\"\r\n\r\ninterface Props extends Navigatable<{\r\n    /**\r\n     * Optional error message, in case user was automatically redirected to this view, because of an error.\r\n     */\r\n    errorMsg?: string\r\n}> {}\r\ninterface State {\r\n    songList?: SongInfo[]\r\n    searchString?: string\r\n}\r\nexport class SelectSong extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        // Read song list.\r\n        fetch(`${process.env.PUBLIC_URL}/content/list.json`)\r\n            .then((r) => r.json())\r\n            .then((songList) => this.setState({ songList }))\r\n            // For development, auto traversal of GUI. OUTDATED, should use history to navigate.\r\n            // .then(() => {\r\n            //     const songList = this.state.songList as SongInfo[]\r\n            //     const partialSongInfo = songList.find((songInfo) => songInfo.name.includes(\"Nice Guy\")) as SongInfo\r\n            //     this.getFullSongInfo(partialSongInfo)\r\n            //         .then((song) => {\r\n            //             this.setState({\r\n            //                 subState: {\r\n            //                     id: \"display-song\",\r\n            //                     partialSongInfo,\r\n            //                     song\r\n            //                 }\r\n            //             })\r\n            //         })\r\n            // })\r\n        const errorMsg = this.props.match.params.errorMsg\r\n        if (errorMsg !== undefined) {\r\n            // Display error message as a popup, that disappears automatically.\r\n            message.error(errorMsg)\r\n            // Replace URL, so that reloading won't show the error again.\r\n            this.props.history.replace(\"/\")\r\n        }\r\n        this.state = {}\r\n    }\r\n    componentDidMount() {\r\n        // Scroll to top of page always. TODO: Use decorator?\r\n        window.scrollTo(0, 0)\r\n    }\r\n    onSearchSong = (value: string) => {\r\n        this.setState({\r\n            searchString: value.length > 0 ?\r\n                value : undefined\r\n        })\r\n    }\r\n    onSelectSong = (song: SongInfo) => {\r\n        this.props.history.push(\"/song/\" + `${song.url}`)\r\n    }\r\n    render() {\r\n        const { songList } = this.state\r\n        const { searchString } = this.state\r\n        return songList === undefined ?\r\n            <LoadingIndicator/>\r\n            :\r\n            <div>\r\n                <Typography.Title>Select song ({songList.length})</Typography.Title>\r\n                <Input.Search\r\n                    placeholder=\"Search by artist / song name\"\r\n                    size=\"default\"\r\n                    onChange={(e) => this.onSearchSong(e.target.value)}\r\n                    allowClear={true}\r\n                />\r\n                <SongList\r\n                    songList={songList}\r\n                    searchString={searchString}\r\n                    onSelectSong={this.onSelectSong}\r\n                />\r\n            </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    defaultSelectedVersion: SongVersion\r\n    onSelectVersion: (selectedVersionIndex: number) => void\r\n}\r\ninterface State {}\r\nexport class VersionSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { song, defaultSelectedVersion, onSelectVersion } = this.props\r\n        const { versions } = song\r\n        return <div\r\n            className=\"versionSelector\"\r\n        >\r\n            {versions.length > 1 &&\r\n                <div>\r\n                    {versions.map((version, i) =>\r\n                        <Button\r\n                            key={`${i}`}\r\n                            onClick={() => onSelectVersion(i)}\r\n                            type={version === defaultSelectedVersion ?\r\n                                \"primary\" : \"default\"\r\n                            }\r\n                        >\r\n                            {version.name}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Row, Col } from \"antd/lib\"\r\nconst { Title, Text, Paragraph } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    version: SongVersion\r\n    onClick: () => void\r\n}\r\ninterface State {}\r\ninterface Point {\r\n    x: number\r\n    y: number\r\n}\r\nexport class SongContent extends React.Component<Props, State> {\r\n\r\n    touchStartTime?: number\r\n    touchStartLocation?: Point\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onDoubleClick = () => {\r\n        this.props.onClick()\r\n    }\r\n    onTouchStart = (e: React.TouchEvent) => {\r\n        this.touchStartTime = window.performance.now()\r\n        this.touchStartLocation = {\r\n            x: e.changedTouches[0].clientX,\r\n            y: e.changedTouches[0].clientY\r\n        }\r\n    }\r\n    onTouchEnd = (e: React.TouchEvent) => {\r\n        // Differentiate between pokes and sweeps.\r\n        const tDelta = window.performance.now() - (this.touchStartTime as number)\r\n        const pDelta = {\r\n            x: e.changedTouches[0].clientX - (this.touchStartLocation as Point ).x,\r\n            y: e.changedTouches[0].clientY - (this.touchStartLocation as Point ).y\r\n        }\r\n        const pDeltaDist = Math.sqrt(Math.pow(pDelta.x, 2) + Math.pow(pDelta.y, 2))\r\n        if (tDelta <= 150 && pDeltaDist <= 20) {\r\n            // Poke.\r\n            this.props.onClick()\r\n        }\r\n    }\r\n    render() {\r\n        const { version } = this.props\r\n        const contentRows = version.content.split(\"\\n\")\r\n        return <div\r\n            onDoubleClick={this.onDoubleClick}\r\n            onTouchStart={this.onTouchStart}\r\n            onTouchEnd={this.onTouchEnd}\r\n        >\r\n            {contentRows.map((row, i) =>\r\n                <pre\r\n                    key={i}\r\n                    className=\"songParagraph\"\r\n                >\r\n                    {row}\r\n                </pre>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n","import { SongVersion } from \"./song\";\r\n\r\n/**\r\n * Collection of static AutoScrollSpeed values.\r\n */\r\nexport const AutoScrollValues = {\r\n    /**\r\n     *\r\n     */\r\n    min: 10 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    max: 1 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    default: 3 * 60 as AutoScrollSpeed\r\n}\r\n/**\r\n * Number presents **seconds** that it should take to scroll the whole content from start to end.\r\n */\r\nexport type AutoScrollSpeed = number\r\n/**\r\n *\r\n */\r\nconst _SongAutoScrollSpeedID = (song: SongVersion): string => `ass-${song.id}`\r\n/**\r\n * Get AutoScrollSpeed for a Version of a Song. Included factors are:\r\n * - localStorage\r\n * - SongVersion.duration\r\n * - default AutoScrollSpeed\r\n */\r\nexport const getSongAutoScrollSpeed = (\r\n    song: SongVersion\r\n): AutoScrollSpeed => {\r\n    // Check for saved value in localStorage.\r\n    if (localStorage !== undefined) {\r\n        const savedPreference = localStorage.getItem(_SongAutoScrollSpeedID(song))\r\n        if (savedPreference !== null)\r\n            return Number(savedPreference) as AutoScrollSpeed\r\n    }\r\n    return song.duration !== undefined ?\r\n        song.duration : AutoScrollValues.default\r\n}\r\n/**\r\n * Save AutoScrollSpeed for a Version of a Song.\r\n * @param   song                SongVersion\r\n * @param   autoScrollSpeed     AutoScrollSpeed\r\n * @param   mStorage            Mock interface for *localStorage*\r\n */\r\nexport const saveSongAutoScrollSpeed = (\r\n    song: SongVersion,\r\n    autoScrollSpeed: AutoScrollSpeed,\r\n    mStorage?: Storage | null\r\n) => {\r\n    const storage = (mStorage === undefined) ?\r\n        localStorage :\r\n        mStorage\r\n\r\n    if (! storage)\r\n        // localStorage is not available.\r\n        return\r\n\r\n    storage.setItem(_SongAutoScrollSpeedID(song), String(autoScrollSpeed))\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Tooltip, Slider } from \"antd/lib\"\r\nimport { AutoScrollValues, AutoScrollSpeed, saveSongAutoScrollSpeed } from \"../../datastructures/autoScroll\"\r\nimport { SliderValue } from \"antd/lib/slider\";\r\nimport { lerp } from \"../../utils\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    songVersion: SongVersion\r\n    enabled: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n    onToggle: () => void\r\n    onSetSpeed: (autoScrollSpeed: AutoScrollSpeed) => void\r\n}\r\ninterface State {}\r\nexport class AutoScrollConfig extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onSliderChange = (value: SliderValue) => {\r\n        this.props.onSetSpeed(_sliderValueToAutoScrollSpeed(value as number))\r\n    }\r\n    afterSliderChange = (value: SliderValue) => {\r\n        // Save preference.\r\n        saveSongAutoScrollSpeed(\r\n            this.props.songVersion,\r\n            _sliderValueToAutoScrollSpeed(value as number)\r\n        )\r\n    }\r\n    render() {\r\n        const { enabled, autoScrollSpeed, onToggle } = this.props\r\n        return <div>\r\n            <Tooltip\r\n                title=\"Also activated by poking / double-clicking anywhere!\"\r\n                mouseEnterDelay={1}\r\n            >\r\n                <Button\r\n                    onClick={onToggle}\r\n                    type={enabled ? \"primary\" : \"default\"}\r\n                >\r\n                    {`Autoscroll ${ enabled ? \"ON\" : \"OFF\" }`}\r\n                </Button>\r\n            </Tooltip>\r\n            <Slider\r\n                className=\"autoScrollSlider\"\r\n                min={0}\r\n                max={100}\r\n                value={_autoScrollSpeedToSliderValue(autoScrollSpeed)}\r\n                marks={{\r\n                    [_autoScrollSpeedToSliderValue(AutoScrollValues.default)]: \"\"\r\n                }}\r\n                onChange={this.onSliderChange}\r\n                onAfterChange={this.afterSliderChange}\r\n            />\r\n            <div\r\n                className=\"autoScrollValueDiv transparentBackground\"\r\n            >\r\n                <Text\r\n                    className=\"autoScrollValueLabel transparentText\"\r\n                >\r\n                    {\r\n                    // tslint:disable-next-line: max-line-length\r\n                    `${Math.floor(autoScrollSpeed / 60)} min ${Math.floor(autoScrollSpeed) % 60 > 0 ? Math.floor(autoScrollSpeed) % 60 + \" sec\" : \"\"}`\r\n                    }\r\n                </Text>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\nconst _autoScrollSpeedToSliderValue = (autoScrollSpeed: AutoScrollSpeed): number => lerp(\r\n    (autoScrollSpeed - AutoScrollValues.min) / (AutoScrollValues.max - AutoScrollValues.min),\r\n    0,\r\n    100\r\n)\r\nconst _sliderValueToAutoScrollSpeed = (sliderValue: number): AutoScrollSpeed => lerp(\r\n    (sliderValue as number) / 100,\r\n    AutoScrollValues.min,\r\n    AutoScrollValues.max\r\n)\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Affix, Tag } from \"antd/lib\"\r\nimport { VersionSelector } from \"./VersionSelector\"\r\nimport { SongContent } from \"./SongContent\"\r\nimport { AutoScrollConfig } from \"./AutoScrollConfig\"\r\nimport { Link, animateScroll } from \"react-scroll\"\r\nimport { AutoScrollSpeed, AutoScrollValues, getSongAutoScrollSpeed } from \"../../datastructures/autoScroll\";\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\";\r\nimport { Navigatable } from \"../common/navigation\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props extends Navigatable<{\r\n    /**\r\n     * Selected song uri.\r\n     */\r\n    uri: string\r\n    /**\r\n     * Selected version index.\r\n     */\r\n    selectedVersionIndex?: number\r\n}> {}\r\ntype State = {} | {\r\n    song: Song\r\n    selectedVersion: SongVersion\r\n    autoScrollActive: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n}\r\nexport class DisplaySong extends React.Component<Props, State> {\r\n\r\n    scrollDivRef?: HTMLDivElement | null\r\n    isCurrentlyMounted: boolean = false\r\n    lastAutoScrollUpdate?: number\r\n    scrollingFractions: number = 0\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        const { uri } = props.match.params\r\n        fetch(`${process.env.PUBLIC_URL}/content/${uri}`)\r\n            .then((r) => r.json())\r\n            .catch(() => {\r\n                // Navigate to start menu, and display error message.\r\n                this.props.history.replace(\"/error/\" + `Song not found :(`)\r\n            })\r\n            .then((song: Song | undefined) => {\r\n                if (song !== undefined)\r\n                    this.selectVersionFromProps(song, props)\r\n            })\r\n        this.state = {}\r\n    }\r\n    componentDidMount() {\r\n        this.isCurrentlyMounted = true\r\n        window.requestAnimationFrame = window.requestAnimationFrame ||\r\n            ((clbk: () => void) => setTimeout(clbk, 50))\r\n        window.requestAnimationFrame(this.updateAutoScroll)\r\n\r\n        // Scroll to top of page always. TODO: Use decorator?\r\n        window.scrollTo(0, 0)\r\n    }\r\n    componentWillUnmount() {\r\n        this.isCurrentlyMounted = false\r\n    }\r\n    componentWillReceiveProps(props: Props) {\r\n        if (\"song\" in this.state)\r\n            this.selectVersionFromProps(this.state.song, props)\r\n    }\r\n    selectVersionFromProps(song: Song, props: Props) {\r\n        const { selectedVersionIndex } = props.match.params\r\n        const selectedVersion = song.versions[\r\n            (selectedVersionIndex !== undefined && selectedVersionIndex < song.versions.length) ?\r\n                selectedVersionIndex :\r\n                0\r\n        ]\r\n        this.setState({\r\n            song,\r\n            selectedVersion,\r\n            autoScrollSpeed: getSongAutoScrollSpeed(selectedVersion),\r\n            autoScrollActive: false\r\n        })\r\n    }\r\n    onSelectVersion = (selectedVersionIndex: number) => {\r\n        this.props.history.push(\r\n            `/song/${this.props.match.params.uri}/${selectedVersionIndex}`\r\n        )\r\n    }\r\n    goToBeginning = () => {\r\n        animateScroll.scrollToTop()\r\n    }\r\n    onToggleAutoScroll = () => {\r\n        if (\"autoScrollActive\" in this.state)\r\n            this.setState({\r\n                autoScrollActive: !this.state.autoScrollActive\r\n            })\r\n    }\r\n    onSetAutoScrollSpeed = (autoScrollSpeed: AutoScrollSpeed) => {\r\n        this.setState({\r\n            autoScrollSpeed\r\n        })\r\n    }\r\n    returnToPreviousMenu = () => {\r\n        this.props.history.push(\"/\")\r\n    }\r\n    updateAutoScroll = () => {\r\n        const tNow = window.performance.now()\r\n        if (\r\n            this.isCurrentlyMounted &&\r\n            'autoScrollActive' in this.state &&\r\n            this.state.autoScrollActive &&\r\n            this.scrollDivRef &&\r\n            this.lastAutoScrollUpdate !== undefined\r\n        ) {\r\n            const autoScrollSpeed = this.state.autoScrollSpeed\r\n            const div = this.scrollDivRef\r\n            const divBounds = div.getBoundingClientRect()\r\n            const divHeight = divBounds.bottom - divBounds.top\r\n            const viewPortHeight = window.innerHeight\r\n            const tDelta = (tNow - this.lastAutoScrollUpdate)\r\n            const scrollAmount = (divHeight - viewPortHeight) * tDelta / (autoScrollSpeed * 1000)\r\n                + this.scrollingFractions\r\n\r\n            const scrollAmountInteger = Math.floor(scrollAmount)\r\n            const scrollAmountFraction = scrollAmount - scrollAmountInteger\r\n            this.scrollingFractions = scrollAmountFraction\r\n\r\n            window.scrollBy(0, scrollAmountInteger)\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n        } else {\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n            this.scrollingFractions = 0\r\n        }\r\n\r\n        this.lastAutoScrollUpdate = tNow\r\n    }\r\n    render() {\r\n        if (! (\"song\" in this.state)) {\r\n            return <LoadingIndicator/>\r\n        } else {\r\n            const { song, selectedVersion, autoScrollActive, autoScrollSpeed } = this.state\r\n            return <div\r\n                ref={(ref) => this.scrollDivRef = ref}\r\n            >\r\n                <Title>{song.artist}</Title>\r\n                <Title level={2}>{song.name}</Title>\r\n                <div>\r\n                    <VersionSelector\r\n                        song={song}\r\n                        defaultSelectedVersion={selectedVersion}\r\n                        onSelectVersion={this.onSelectVersion}\r\n                    />\r\n                    <Affix\r\n                        className=\"autoScrollConfigBox\"\r\n                        offsetTop={0}\r\n                    >\r\n                        <AutoScrollConfig\r\n                            songVersion={selectedVersion}\r\n                            enabled={autoScrollActive}\r\n                            autoScrollSpeed={autoScrollSpeed}\r\n                            onToggle={this.onToggleAutoScroll}\r\n                            onSetSpeed={this.onSetAutoScrollSpeed}\r\n                        />\r\n                    </Affix>\r\n                </div>\r\n                <br/>\r\n                <Tag color=\"blue\">{selectedVersion.instrument}</Tag>\r\n                {selectedVersion.instrument === \"guitar\" &&\r\n                    <Tag color=\"volcano\">{selectedVersion.tuning}</Tag>\r\n                }\r\n                <SongContent\r\n                    song={song}\r\n                    version={selectedVersion}\r\n                    onClick={this.onToggleAutoScroll}\r\n                />\r\n                <br/>\r\n                <div>\r\n                    <Button\r\n                        onClick={this.goToBeginning}\r\n                    >\r\n                        To beginning\r\n                    </Button>\r\n                    <Button\r\n                        onClick={this.returnToPreviousMenu}\r\n                    >\r\n                        To song selection\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Typography } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class NotFound extends React.Component<Props, State> {\r\n    render() {\r\n        return <div>\r\n            <Text>Page not found :(</Text>\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\r\nimport { SelectSong } from \"./components/selectSong/SelectSong\"\r\nimport \"./styles.css\";\r\nimport { DisplaySong } from \"./components/displaySong/DisplaySong\";\r\nimport { NotFound } from \"./components/NotFound\"\r\n\r\ninterface Props {}\r\ninterface State {\r\n    bgUrl?: string\r\n}\r\nclass App extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        // fetch(\"bg.png\")\r\n        //     .then((data) => {\r\n        //         this.setState({\r\n        //             bgUrl: data.url\r\n        //         })\r\n        //     })\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { bgUrl } = this.state\r\n        return <div\r\n            style={{\r\n                backgroundImage: bgUrl ? `url(${bgUrl})` : \"\",\r\n                backgroundSize: \"auto 100%\",\r\n                backgroundPosition: \"center\",\r\n                backgroundRepeat: \"no-repeat\"\r\n            }}\r\n        >\r\n            <BrowserRouter\r\n                basename={process.env.PUBLIC_URL}\r\n            >\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={SelectSong}/>\r\n                    <Route path=\"/error/:errorMsg\" component={SelectSong}/>\r\n                    <Route path=\"/song/:uri/:selectedVersionIndex?\" component={DisplaySong}/>\r\n                    <Route component={NotFound}/>\r\n                </Switch>\r\n            </BrowserRouter >\r\n        </div>\r\n    }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}