{"version":3,"sources":["components/selectSong/SongList.tsx","components/common/LoadingIndicator.tsx","components/selectSong/SelectSong.tsx","components/displaySong/VersionSelector.tsx","components/displaySong/SongContent.tsx","datastructures/autoScroll.ts","utils.ts","components/displaySong/AutoScrollConfig.tsx","components/displaySong/DisplaySong.tsx","components/NotFound.tsx","index.tsx"],"names":["TreeNode","Tree","SongList","Typography","Text","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSelectTreeNode","selectedKeys","_this$props","songList","onSelectSong","selectedTreeNodeKey","selectedSong","find","songInfo","id","state","groupByArtist","inherits","createClass","key","value","songsByArtist","react","lib","showIcon","switcherIcon","type","onSelect","map","artistSongs","iArtist","concat","title","artist","length","song","name","songs","_this$props2","searchString","undefined","renderSongTree","mapSongsByArtist","sort","sortArtistsByName","sortSongsByName","renderSongList","item","SearchStringSorter","React","_songSimilarity","toLowerCase","startsWith","includes","_searchString","a","b","aScore","bScore","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","added","_i","_songsByArtist","push","err","return","textA","toUpperCase","textB","SortByName","LoadingIndicator","apply","arguments","size","className","SelectSong","onSearchSong","setState","history","url","fetch","then","r","json","errorMsg","match","params","message","error","window","scrollTo","_this2","LoadingIndicator_LoadingIndicator","Title","Search","placeholder","enterButton","onChange","e","target","allowClear","SongList_SongList","VersionSelector","defaultSelectedVersion","onSelectVersion","versions","version","i","onClick","SongContent","Paragraph","touchStartTime","touchStartLocation","onDoubleClick","onTouchStart","performance","now","x","changedTouches","clientX","y","clientY","onTouchEnd","tDelta","pDelta","pDeltaDist","Math","sqrt","pow","contentRows","content","split","row","AutoScrollValues","min","max","default","_SongAutoScrollSpeedID","getSongAutoScrollSpeed","localStorage","savedPreference","getItem","Number","duration","saveSongAutoScrollSpeed","autoScrollSpeed","mStorage","storage","setItem","String","lerp","amount","AutoScrollConfig","onSliderChange","onSetSpeed","_sliderValueToAutoScrollSpeed","afterSliderChange","songVersion","enabled","onToggle","mouseEnterDelay","_autoScrollSpeedToSliderValue","marks","defineProperty","onAfterChange","AutoScrollConfig_Text","floor","sliderValue","DisplaySong","scrollDivRef","isCurrentlyMounted","lastAutoScrollUpdate","scrollingFractions","selectedVersionIndex","uri","goToBeginning","animateScroll","scrollToTop","onToggleAutoScroll","autoScrollActive","onSetAutoScrollSpeed","returnToPreviousMenu","updateAutoScroll","tNow","divBounds","getBoundingClientRect","scrollAmount","bottom","top","innerHeight","scrollAmountInteger","scrollAmountFraction","scrollBy","requestAnimationFrame","catch","replace","selectVersionFromProps","clbk","setTimeout","selectedVersion","_this$state","ref","DisplaySong_Title","level","VersionSelector_VersionSelector","offsetTop","AutoScrollConfig_AutoScrollConfig","color","instrument","tuning","SongContent_SongContent","NotFound","NotFound_Text","App","bgUrl","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","react_router_dom","basename","process","react_router","exact","path","component","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.1f5ee95d.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { Tree, Icon, List, Typography } from \"antd/lib\"\r\nconst { TreeNode } = Tree\r\nconst { Text } = Typography\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    searchString?: string\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\ninterface State {\r\n    groupByArtist: boolean\r\n}\r\nexport class SongList extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {\r\n            // TODO: localStorage\r\n            groupByArtist: true\r\n        }\r\n    }\r\n    onSelectTreeNode = (selectedKeys: string[]) => {\r\n        const { songList, onSelectSong } = this.props\r\n        const selectedTreeNodeKey = selectedKeys[0]\r\n\r\n        // Check if selected Node was a song.\r\n        const selectedSong = songList.find((songInfo) =>\r\n            songInfo.id === selectedTreeNodeKey\r\n        )\r\n        if (selectedSong)\r\n            onSelectSong(selectedSong)\r\n    }\r\n    renderSongTree(songsByArtist: SongInfo[][]): JSX.Element {\r\n        return <Tree\r\n            showIcon\r\n            switcherIcon={<Icon type=\"down\" />}\r\n            onSelect={this.onSelectTreeNode}\r\n        >\r\n            {songsByArtist.map((artistSongs, iArtist) => {\r\n                const key = `${iArtist}`\r\n                return <TreeNode\r\n                    key={key}\r\n                    title={`${artistSongs[0].artist} (${artistSongs.length})`}\r\n                >\r\n                    {artistSongs.map((song) =>\r\n                        <TreeNode\r\n                            key={song.id}\r\n                            title={`${song.name}`}\r\n                        />\r\n                    )}\r\n                </TreeNode>\r\n            })}\r\n        </Tree>\r\n    }\r\n    renderSongList(songs: SongInfo[]): JSX.Element {\r\n        return <Tree\r\n            showIcon\r\n            onSelect={this.onSelectTreeNode}\r\n        >\r\n            {songs.map((song) => <TreeNode\r\n                    key={song.id}\r\n                    title={`${song.name} - ${song.artist}`}\r\n            />)}\r\n        </Tree>\r\n    }\r\n    render() {\r\n        const { songList, searchString } = this.props\r\n        const { groupByArtist } = this.state\r\n        return <div>\r\n            {\r\n                (searchString === undefined) ? (\r\n                    (groupByArtist) ? (\r\n                        this.renderSongTree(\r\n                            mapSongsByArtist(songList)\r\n                                .sort(sortArtistsByName)\r\n                                .map((artistSongs) => artistSongs.sort(sortSongsByName))\r\n                        )\r\n                    ) : (\r\n                        this.renderSongList(\r\n                            songList.sort(sortSongsByName)\r\n                        )\r\n                    )\r\n                ) : (\r\n                    this.renderSongList(\r\n                        songList\r\n                            // Copy Array.\r\n                            .map((item) => item)\r\n                            .sort(SearchStringSorter(searchString))\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    }\r\n}\r\nconst _songSimilarity = (songInfo: SongInfo, searchString: string): number => {\r\n    const name = songInfo.name.toLowerCase()\r\n    const artist = songInfo.artist.toLowerCase()\r\n    return (name.startsWith(searchString) || artist.startsWith(searchString)) ?\r\n            1 :\r\n            (name.includes(searchString) || artist.includes(searchString) ?\r\n                0.5 :\r\n                0\r\n            )\r\n}\r\nconst SearchStringSorter = (_searchString: string) => {\r\n    const searchString = _searchString.toLowerCase()\r\n    return (a: SongInfo, b: SongInfo) => {\r\n        const aScore = _songSimilarity(a, searchString)\r\n        const bScore = _songSimilarity(b, searchString)\r\n        return (aScore < bScore) ? 1 : (aScore > bScore) ? -1 : 0\r\n    }\r\n}\r\nconst mapSongsByArtist = (songs: SongInfo[]): SongInfo[][] => {\r\n    const songsByArtist: SongInfo[][] = []\r\n    for (const song of songs) {\r\n        // Check for existing item with same artist.\r\n        let added = false\r\n        for (const artistSongs of songsByArtist)\r\n            if (artistSongs[0].artist === song.artist) {\r\n                artistSongs.push(song)\r\n                added = true\r\n            }\r\n        if (!added)\r\n            songsByArtist.push([song])\r\n    }\r\n    return songsByArtist\r\n        .sort((a, b) => {\r\n            const textA = a[0].artist.toUpperCase()\r\n            const textB = b[0].artist.toUpperCase()\r\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n        })\r\n}\r\n/**\r\n * Sorter factory for objects with names.\r\n */\r\nconst SortByName = function<T>(name: (o: T) => string) {\r\n    return (a: T, b: T): -1 | 1 | 0 => {\r\n        const textA = name(a).toUpperCase()\r\n        const textB = name(b).toUpperCase()\r\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n    }\r\n}\r\nconst sortSongsByName = SortByName<SongInfo>((songInfo) => songInfo.name)\r\nconst sortArtistsByName = SortByName<SongInfo[]>((artistSongs) => artistSongs[0].artist)\r\n","import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class LoadingIndicator extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absoluteCenter\"\r\n        />\r\n    }\r\n}\r\n","\r\nimport * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { SongList } from \"./SongList\"\r\nimport { Button, Layout, Typography, Icon, Input, message } from \"antd/lib\"\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\";\r\nimport { Navigatable } from \"../common/navigation\"\r\n\r\ninterface Props extends Navigatable<{\r\n    /**\r\n     * Optional error message, in case user was automatically redirected to this view, because of an error.\r\n     */\r\n    errorMsg?: string\r\n}> {}\r\ninterface State {\r\n    songList?: SongInfo[]\r\n    searchString?: string\r\n}\r\nexport class SelectSong extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        // Read song list.\r\n        fetch(\"/content/list.json\")\r\n            .then((r) => r.json())\r\n            .then((songList) => this.setState({ songList }))\r\n            // For development, auto traversal of GUI. OUTDATED, should use history to navigate.\r\n            // .then(() => {\r\n            //     const songList = this.state.songList as SongInfo[]\r\n            //     const partialSongInfo = songList.find((songInfo) => songInfo.name.includes(\"Nice Guy\")) as SongInfo\r\n            //     this.getFullSongInfo(partialSongInfo)\r\n            //         .then((song) => {\r\n            //             this.setState({\r\n            //                 subState: {\r\n            //                     id: \"display-song\",\r\n            //                     partialSongInfo,\r\n            //                     song\r\n            //                 }\r\n            //             })\r\n            //         })\r\n            // })\r\n        const errorMsg = this.props.match.params.errorMsg\r\n        if (errorMsg !== undefined) {\r\n            // Display error message as a popup, that disappears automatically.\r\n            message.error(errorMsg)\r\n        }\r\n        this.state = {}\r\n    }\r\n    componentDidMount() {\r\n        // Scroll to top of page always. TODO: Use decorator?\r\n        window.scrollTo(0, 0)\r\n    }\r\n    onSearchSong = (value: string) => {\r\n        this.setState({\r\n            searchString: value.length > 0 ?\r\n                value : undefined\r\n        })\r\n    }\r\n    onSelectSong = (song: SongInfo) => {\r\n        this.props.history.push(\"/song/\" + `${song.url}`)\r\n    }\r\n    render() {\r\n        const { songList } = this.state\r\n        const { searchString } = this.state\r\n        return songList === undefined ?\r\n            <LoadingIndicator/>\r\n            :\r\n            <div>\r\n                <Typography.Title>Select song ({songList.length})</Typography.Title>\r\n                <Input.Search\r\n                    placeholder=\"Search by artist / song name\"\r\n                    enterButton=\"Search\"\r\n                    size=\"default\"\r\n                    onChange={(e) => this.onSearchSong(e.target.value)}\r\n                    allowClear={true}\r\n                />\r\n                <SongList\r\n                    songList={songList}\r\n                    searchString={searchString}\r\n                    onSelectSong={this.onSelectSong}\r\n                />\r\n            </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    defaultSelectedVersion: SongVersion\r\n    onSelectVersion: (selectedVersionIndex: number) => void\r\n}\r\ninterface State {}\r\nexport class VersionSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { song, defaultSelectedVersion, onSelectVersion } = this.props\r\n        const { versions } = song\r\n        return <div\r\n            className=\"versionSelector\"\r\n        >\r\n            {versions.length > 1 &&\r\n                <div>\r\n                    {versions.map((version, i) =>\r\n                        <Button\r\n                            key={`${i}`}\r\n                            onClick={() => onSelectVersion(i)}\r\n                            type={version === defaultSelectedVersion ?\r\n                                \"primary\" : \"default\"\r\n                            }\r\n                        >\r\n                            {version.name}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Row, Col } from \"antd/lib\"\r\nconst { Title, Text, Paragraph } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    version: SongVersion\r\n    onClick: () => void\r\n}\r\ninterface State {}\r\ninterface Point {\r\n    x: number\r\n    y: number\r\n}\r\nexport class SongContent extends React.Component<Props, State> {\r\n\r\n    touchStartTime?: number\r\n    touchStartLocation?: Point\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onDoubleClick = () => {\r\n        this.props.onClick()\r\n    }\r\n    onTouchStart = (e: React.TouchEvent) => {\r\n        this.touchStartTime = window.performance.now()\r\n        this.touchStartLocation = {\r\n            x: e.changedTouches[0].clientX,\r\n            y: e.changedTouches[0].clientY\r\n        }\r\n    }\r\n    onTouchEnd = (e: React.TouchEvent) => {\r\n        // Differentiate between pokes and sweeps.\r\n        const tDelta = window.performance.now() - (this.touchStartTime as number)\r\n        const pDelta = {\r\n            x: e.changedTouches[0].clientX - (this.touchStartLocation as Point ).x,\r\n            y: e.changedTouches[0].clientY - (this.touchStartLocation as Point ).y\r\n        }\r\n        const pDeltaDist = Math.sqrt(Math.pow(pDelta.x, 2) + Math.pow(pDelta.y, 2))\r\n        if (tDelta <= 150 && pDeltaDist <= 20) {\r\n            // Poke.\r\n            this.props.onClick()\r\n        }\r\n    }\r\n    render() {\r\n        const { version } = this.props\r\n        const contentRows = version.content.split(\"\\n\")\r\n        return <div\r\n            onDoubleClick={this.onDoubleClick}\r\n            onTouchStart={this.onTouchStart}\r\n            onTouchEnd={this.onTouchEnd}\r\n        >\r\n            {contentRows.map((row, i) =>\r\n                <pre\r\n                    key={i}\r\n                    className=\"songParagraph\"\r\n                >\r\n                    {row}\r\n                </pre>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n","import { SongVersion } from \"./song\";\r\n\r\n/**\r\n * Collection of static AutoScrollSpeed values.\r\n */\r\nexport const AutoScrollValues = {\r\n    /**\r\n     *\r\n     */\r\n    min: 10 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    max: 1 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    default: 3 * 60 as AutoScrollSpeed\r\n}\r\n/**\r\n * Number presents **seconds** that it should take to scroll the whole content from start to end.\r\n */\r\nexport type AutoScrollSpeed = number\r\n/**\r\n *\r\n */\r\nconst _SongAutoScrollSpeedID = (song: SongVersion): string => `ass-${song.id}`\r\n/**\r\n * Get AutoScrollSpeed for a Version of a Song. Included factors are:\r\n * - localStorage\r\n * - SongVersion.duration\r\n * - default AutoScrollSpeed\r\n */\r\nexport const getSongAutoScrollSpeed = (\r\n    song: SongVersion\r\n): AutoScrollSpeed => {\r\n    // Check for saved value in localStorage.\r\n    if (localStorage !== undefined) {\r\n        const savedPreference = localStorage.getItem(_SongAutoScrollSpeedID(song))\r\n        if (savedPreference !== null)\r\n            return Number(savedPreference) as AutoScrollSpeed\r\n    }\r\n    return song.duration !== undefined ?\r\n        song.duration : AutoScrollValues.default\r\n}\r\n/**\r\n * Save AutoScrollSpeed for a Version of a Song.\r\n * @param   song                SongVersion\r\n * @param   autoScrollSpeed     AutoScrollSpeed\r\n * @param   mStorage            Mock interface for *localStorage*\r\n */\r\nexport const saveSongAutoScrollSpeed = (\r\n    song: SongVersion,\r\n    autoScrollSpeed: AutoScrollSpeed,\r\n    mStorage?: Storage | null\r\n) => {\r\n    const storage = (mStorage === undefined) ?\r\n        localStorage :\r\n        mStorage\r\n\r\n    if (! storage)\r\n        // localStorage is not available.\r\n        return\r\n\r\n    storage.setItem(_SongAutoScrollSpeedID(song), String(autoScrollSpeed))\r\n}\r\n","\r\n/**\r\n *\r\n */\r\nexport const lerp = (amount: number, min: number, max: number): number =>\r\n    min + amount * (max - min)\r\n/**\r\n * Pure function for *flattening* Arrays.\r\n */\r\nexport const flatten = <T> (arrayOfArrays: T[][]): T[] => {\r\n    const arr: T[] = []\r\n    const len = arrayOfArrays.length\r\n    for (let i = 0; i < len; i ++) {\r\n        const arr2 = arrayOfArrays[i]\r\n        const len2  = arr2.length\r\n        for (let i2 = 0; i2 < len2; i2 ++)\r\n            arr.push(arr2[len2])\r\n    }\r\n    return arr\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Tooltip, Slider } from \"antd/lib\"\r\nimport { AutoScrollValues, AutoScrollSpeed, saveSongAutoScrollSpeed } from \"../../datastructures/autoScroll\"\r\nimport { SliderValue } from \"antd/lib/slider\";\r\nimport { lerp } from \"../../utils\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    songVersion: SongVersion\r\n    enabled: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n    onToggle: () => void\r\n    onSetSpeed: (autoScrollSpeed: AutoScrollSpeed) => void\r\n}\r\ninterface State {}\r\nexport class AutoScrollConfig extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onSliderChange = (value: SliderValue) => {\r\n        this.props.onSetSpeed(_sliderValueToAutoScrollSpeed(value as number))\r\n    }\r\n    afterSliderChange = (value: SliderValue) => {\r\n        // Save preference.\r\n        saveSongAutoScrollSpeed(\r\n            this.props.songVersion,\r\n            _sliderValueToAutoScrollSpeed(value as number)\r\n        )\r\n    }\r\n    render() {\r\n        const { enabled, autoScrollSpeed, onToggle } = this.props\r\n        return <div>\r\n            <Tooltip\r\n                title=\"Also activated by poking / double-clicking anywhere!\"\r\n                mouseEnterDelay={1}\r\n            >\r\n                <Button\r\n                    onClick={onToggle}\r\n                    type={enabled ? \"primary\" : \"default\"}\r\n                >\r\n                    {`Autoscroll ${ enabled ? \"ON\" : \"OFF\" }`}\r\n                </Button>\r\n            </Tooltip>\r\n            <Slider\r\n                className=\"autoScrollSlider\"\r\n                min={0}\r\n                max={100}\r\n                value={_autoScrollSpeedToSliderValue(autoScrollSpeed)}\r\n                marks={{\r\n                    [_autoScrollSpeedToSliderValue(AutoScrollValues.default)]: \"\"\r\n                }}\r\n                onChange={this.onSliderChange}\r\n                onAfterChange={this.afterSliderChange}\r\n            />\r\n            <div\r\n                className=\"autoScrollValueDiv\"\r\n            >\r\n                <Text\r\n                    className=\"autoScrollValueLabel\"\r\n                >\r\n                    {\r\n                    // tslint:disable-next-line: max-line-length\r\n                    `${Math.floor(autoScrollSpeed / 60)} min ${Math.floor(autoScrollSpeed) % 60 > 0 ? Math.floor(autoScrollSpeed) % 60 + \" sec\" : \"\"}`\r\n                    }\r\n                </Text>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\nconst _autoScrollSpeedToSliderValue = (autoScrollSpeed: AutoScrollSpeed): number => lerp(\r\n    (autoScrollSpeed - AutoScrollValues.min) / (AutoScrollValues.max - AutoScrollValues.min),\r\n    0,\r\n    100\r\n)\r\nconst _sliderValueToAutoScrollSpeed = (sliderValue: number): AutoScrollSpeed => lerp(\r\n    (sliderValue as number) / 100,\r\n    AutoScrollValues.min,\r\n    AutoScrollValues.max\r\n)\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Affix, Tag } from \"antd/lib\"\r\nimport { VersionSelector } from \"./VersionSelector\"\r\nimport { SongContent } from \"./SongContent\"\r\nimport { AutoScrollConfig } from \"./AutoScrollConfig\"\r\nimport { Link, animateScroll } from \"react-scroll\"\r\nimport { AutoScrollSpeed, AutoScrollValues, getSongAutoScrollSpeed } from \"../../datastructures/autoScroll\";\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\";\r\nimport { Navigatable } from \"../common/navigation\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props extends Navigatable<{\r\n    /**\r\n     * Selected song uri.\r\n     */\r\n    uri: string\r\n    /**\r\n     * Selected version index.\r\n     */\r\n    selectedVersionIndex?: number\r\n}> {}\r\ntype State = {} | {\r\n    song: Song\r\n    selectedVersion: SongVersion\r\n    autoScrollActive: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n}\r\nexport class DisplaySong extends React.Component<Props, State> {\r\n\r\n    scrollDivRef?: HTMLDivElement | null\r\n    isCurrentlyMounted: boolean = false\r\n    lastAutoScrollUpdate?: number\r\n    scrollingFractions: number = 0\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        const { uri } = props.match.params\r\n        fetch(`/content/${uri}`)\r\n            .then((r) => r.json())\r\n            .catch(() => {\r\n                // Navigate to start menu, and display error message.\r\n                // TODO: Can we clear navigation history somehow?\r\n                this.props.history.replace(\"/error/\" + `Song not found :(`)\r\n            })\r\n            .then((song: Song | undefined) => {\r\n                if (song !== undefined)\r\n                    this.selectVersionFromProps(song, props)\r\n            })\r\n        this.state = {}\r\n    }\r\n    componentDidMount() {\r\n        this.isCurrentlyMounted = true\r\n        window.requestAnimationFrame = window.requestAnimationFrame ||\r\n            ((clbk: () => void) => window.setTimeout(clbk, 50))\r\n        window.requestAnimationFrame(this.updateAutoScroll)\r\n\r\n        // Scroll to top of page always. TODO: Use decorator?\r\n        window.scrollTo(0, 0)\r\n    }\r\n    componentWillUnmount() {\r\n        this.isCurrentlyMounted = false\r\n    }\r\n    componentWillReceiveProps(props: Props) {\r\n        if (\"song\" in this.state)\r\n            this.selectVersionFromProps(this.state.song, props)\r\n    }\r\n    selectVersionFromProps(song: Song, props: Props) {\r\n        const { selectedVersionIndex } = props.match.params\r\n        const selectedVersion = song.versions[\r\n            (selectedVersionIndex !== undefined && selectedVersionIndex < song.versions.length) ?\r\n                selectedVersionIndex :\r\n                0\r\n        ]\r\n        this.setState({\r\n            song,\r\n            selectedVersion,\r\n            autoScrollSpeed: getSongAutoScrollSpeed(selectedVersion),\r\n            autoScrollActive: false\r\n        })\r\n    }\r\n    onSelectVersion = (selectedVersionIndex: number) => {\r\n        this.props.history.push(\r\n            `/song/${this.props.match.params.uri}/${selectedVersionIndex}`\r\n        )\r\n    }\r\n    goToBeginning = () => {\r\n        animateScroll.scrollToTop()\r\n    }\r\n    onToggleAutoScroll = () => {\r\n        if (\"autoScrollActive\" in this.state)\r\n            this.setState({\r\n                autoScrollActive: !this.state.autoScrollActive\r\n            })\r\n    }\r\n    onSetAutoScrollSpeed = (autoScrollSpeed: AutoScrollSpeed) => {\r\n        this.setState({\r\n            autoScrollSpeed\r\n        })\r\n    }\r\n    returnToPreviousMenu = () => {\r\n        this.props.history.push(\"/\")\r\n    }\r\n    updateAutoScroll = () => {\r\n        if (!this.isCurrentlyMounted || !(\"autoScrollActive\" in this.state))\r\n            return\r\n\r\n        const tNow = window.performance.now()\r\n        if (\r\n            this.state.autoScrollActive &&\r\n            this.scrollDivRef &&\r\n            this.lastAutoScrollUpdate !== undefined\r\n        ) {\r\n            const autoScrollSpeed = this.state.autoScrollSpeed\r\n            const div = this.scrollDivRef\r\n            const divBounds = div.getBoundingClientRect()\r\n            const divHeight = divBounds.bottom - divBounds.top\r\n            const viewPortHeight = window.innerHeight\r\n            const tDelta = (tNow - this.lastAutoScrollUpdate)\r\n            const scrollAmount = (divHeight - viewPortHeight) * tDelta / (autoScrollSpeed * 1000)\r\n                + this.scrollingFractions\r\n\r\n            const scrollAmountInteger = Math.floor(scrollAmount)\r\n            const scrollAmountFraction = scrollAmount - scrollAmountInteger\r\n            this.scrollingFractions = scrollAmountFraction\r\n\r\n            window.scrollBy(0, scrollAmountInteger)\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n        } else {\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n            this.scrollingFractions = 0\r\n        }\r\n\r\n        this.lastAutoScrollUpdate = tNow\r\n    }\r\n    render() {\r\n        if (! (\"song\" in this.state)) {\r\n            return <LoadingIndicator/>\r\n        } else {\r\n            const { song, selectedVersion, autoScrollActive, autoScrollSpeed } = this.state\r\n            return <div\r\n                ref={(ref) => this.scrollDivRef = ref}\r\n            >\r\n                <Title>{song.artist}</Title>\r\n                <Title level={2}>{song.name}</Title>\r\n                <div>\r\n                    <VersionSelector\r\n                        song={song}\r\n                        defaultSelectedVersion={selectedVersion}\r\n                        onSelectVersion={this.onSelectVersion}\r\n                    />\r\n                    <Affix\r\n                        className=\"autoScrollConfigBox\"\r\n                        offsetTop={0}\r\n                    >\r\n                        <AutoScrollConfig\r\n                            songVersion={selectedVersion}\r\n                            enabled={autoScrollActive}\r\n                            autoScrollSpeed={autoScrollSpeed}\r\n                            onToggle={this.onToggleAutoScroll}\r\n                            onSetSpeed={this.onSetAutoScrollSpeed}\r\n                        />\r\n                    </Affix>\r\n                </div>\r\n                <br/>\r\n                <Tag color=\"blue\">{selectedVersion.instrument}</Tag>\r\n                {selectedVersion.instrument === \"guitar\" &&\r\n                    <Tag color=\"volcano\">{selectedVersion.tuning}</Tag>\r\n                }\r\n                <SongContent\r\n                    song={song}\r\n                    version={selectedVersion}\r\n                    onClick={this.onToggleAutoScroll}\r\n                />\r\n                <br/>\r\n                <div>\r\n                    <Button\r\n                        onClick={this.goToBeginning}\r\n                    >\r\n                        To beginning\r\n                    </Button>\r\n                    <Button\r\n                        onClick={this.returnToPreviousMenu}\r\n                    >\r\n                        To song selection\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Typography } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class NotFound extends React.Component<Props, State> {\r\n    render() {\r\n        return <div>\r\n            <Text>Page not found :(</Text>\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\r\nimport { SelectSong } from \"./components/selectSong/SelectSong\"\r\nimport \"./styles.css\";\r\nimport { DisplaySong } from \"./components/displaySong/DisplaySong\";\r\nimport { NotFound } from \"./components/NotFound\"\r\n\r\ninterface Props {}\r\ninterface State {\r\n    bgUrl?: string\r\n}\r\nclass App extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        // fetch(\"bg.png\")\r\n        //     .then((data) => {\r\n        //         this.setState({\r\n        //             bgUrl: data.url\r\n        //         })\r\n        //     })\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { bgUrl } = this.state\r\n        return <div\r\n            style={{\r\n                backgroundImage: bgUrl ? `url(${bgUrl})` : \"\",\r\n                backgroundSize: \"auto 100%\",\r\n                backgroundPosition: \"center\",\r\n                backgroundRepeat: \"no-repeat\"\r\n            }}\r\n        >\r\n            <BrowserRouter\r\n                basename={process.env.PUBLIC_URL}\r\n            >\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={SelectSong}/>\r\n                    <Route path=\"/error/:errorMsg\" component={SelectSong}/>\r\n                    <Route path=\"/song/:uri/:selectedVersionIndex?\" component={DisplaySong}/>\r\n                    <Route component={NotFound}/>\r\n                </Switch>\r\n            </BrowserRouter >\r\n        </div>\r\n    }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}