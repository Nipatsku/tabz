{"version":3,"sources":["components/selectSong/SongList.tsx","components/common/LoadingIndicator.tsx","components/selectSong/SelectSong.tsx","components/displaySong/VersionSelector.tsx","components/displaySong/SongContent.tsx","datastructures/autoScroll.ts","utils.ts","components/displaySong/AutoScrollConfig.tsx","components/displaySong/DisplaySong.tsx","components/NotFound.tsx","index.tsx"],"names":["TreeNode","Tree","SongList","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","onSelectTreeNode","selectedKeys","_this$props","props","songList","onSelectSong","selectedTreeNodeKey","selectedSong","find","songInfo","id","inherits","createClass","key","value","_this$props2","searchString","songsSortedBySearchString","map","item","sort","SearchStringSorter","react","lib","itemLayout","dataSource","renderItem","Item","onClick","Meta","title","artist","name","songsByArtist","mapSongsByArtist","sortArtistsByName","artistSongs","sortSongsByName","showIcon","switcherIcon","type","onSelect","iArtist","song","React","_songSimilarity","toLowerCase","startsWith","includes","_searchString","a","b","aScore","bScore","songs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","added","_i","_songsByArtist","push","err","return","textA","toUpperCase","textB","SortByName","LoadingIndicator","size","className","SelectSong","onSearchSong","setState","history","url","fetch","then","r","json","errorMsg","match","params","message","error","state","window","scrollTo","_this2","LoadingIndicator_LoadingIndicator","Title","Search","placeholder","enterButton","onChange","e","target","allowClear","SongList_SongList","VersionSelector","Typography","Text","defaultSelectedVersion","onSelectVersion","versions","version","i","SongContent","Paragraph","touchStartTime","touchStartLocation","onDoubleClick","onTouchStart","performance","now","x","changedTouches","clientX","y","clientY","onTouchEnd","tDelta","pDelta","pDeltaDist","Math","sqrt","pow","contentRows","content","split","row","AutoScrollValues","min","max","default","_SongAutoScrollSpeedID","getSongAutoScrollSpeed","localStorage","savedPreference","getItem","Number","duration","saveSongAutoScrollSpeed","autoScrollSpeed","mStorage","storage","setItem","String","lerp","amount","AutoScrollConfig","onSliderChange","onSetSpeed","_sliderValueToAutoScrollSpeed","afterSliderChange","songVersion","enabled","onToggle","mouseEnterDelay","_autoScrollSpeedToSliderValue","marks","defineProperty","onAfterChange","AutoScrollConfig_Text","floor","sliderValue","DisplaySong","scrollDivRef","isCurrentlyMounted","lastAutoScrollUpdate","scrollingFractions","selectedVersionIndex","uri","goToBeginning","animateScroll","scrollToTop","onToggleAutoScroll","autoScrollActive","onSetAutoScrollSpeed","returnToPreviousMenu","updateAutoScroll","tNow","divBounds","getBoundingClientRect","scrollAmount","bottom","top","innerHeight","scrollAmountInteger","scrollAmountFraction","scrollBy","requestAnimationFrame","catch","replace","selectVersionFromProps","clbk","setTimeout","selectedVersion","_this$state","ref","DisplaySong_Title","level","VersionSelector_VersionSelector","offsetTop","AutoScrollConfig_AutoScrollConfig","color","instrument","tuning","SongContent_SongContent","NotFound","NotFound_Text","App","bgUrl","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","react_router_dom","react_router","exact","path","component","rootElement","document","getElementById","render","src_App"],"mappings":"iPAGQA,EAAaC,OAAbD,SAQKE,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACIQ,iBAAmB,SAACC,GAA2B,IAAAC,EACRjB,EAAKkB,MAAhCC,EADmCF,EACnCE,SAAUC,EADyBH,EACzBG,aACZC,EAAsBL,EAAa,GAGnCM,EAAeH,EAASI,KAAK,SAACC,GAAD,OAC/BA,EAASC,KAAOJ,IAEhBC,GACAF,EAAaE,IAVzBtB,EAAA,OAAAC,OAAAyB,EAAA,EAAAzB,CAAAJ,EAAAC,GAAAG,OAAA0B,EAAA,EAAA1B,CAAAJ,EAAA,EAAA+B,IAAA,SAAAC,MAAA,WAYa,IAAAC,EAC4C3B,KAAKe,MAA9CC,EADHW,EACGX,SAAUY,EADbD,EACaC,aAAcX,EAD3BU,EAC2BV,aAChC,GAAMW,EAwBC,CACH,IAAMC,EAA4Bb,EAE7Bc,IAAI,SAACC,GAAD,OAAUA,IACdC,KAAKC,EAAmBL,IAC7B,OAAOM,EAAA,cAACC,EAAA,KAAD,CACHC,WAAW,aACXC,WAAYR,EACZS,WAAY,SAACjB,GAAD,OACRa,EAAA,cAACC,EAAA,KAAKI,KAAN,CACIC,QAAS,kBAAMvB,EAAaI,KAE5Ba,EAAA,cAACC,EAAA,KAAKI,KAAKE,KAAX,CACIC,MAAK,GAAA/B,OAAKU,EAASsB,OAAd,OAAAhC,OAA0BU,EAASuB,YApCxD,IAAMC,EAAgBC,EAAiB9B,GAClCgB,KAAKe,GACLjB,IAAI,SAACkB,GAAD,OAAiBA,EAAYhB,KAAKiB,KAC3C,OAAOf,EAAA,cAACC,EAAA,KAAD,CACHe,UAAQ,EACRC,aAAcjB,EAAA,cAACC,EAAA,KAAD,CAAMiB,KAAK,SACzBC,SAAUrD,KAAKY,kBAEdiC,EAAcf,IAAI,SAACkB,EAAaM,GAC7B,IAAM7B,EAAG,GAAAd,OAAM2C,GACf,OAAOpB,EAAA,cAAC1C,EAAD,CACHiC,IAAKA,EACLiB,MAAK,GAAA/B,OAAKqC,EAAY,GAAGL,OAApB,MAAAhC,OAA+BqC,EAAY7C,OAA3C,MAEJ6C,EAAYlB,IAAI,SAACyB,GAAD,OACbrB,EAAA,cAAC1C,EAAD,CACIiC,IAAK8B,EAAKjC,GACVoB,MAAOa,EAAKX,iBAhC5ClD,EAAA,CAA8B8D,aA2DxBC,EAAkB,SAACpC,EAAoBO,GACzC,IAAMgB,EAAOvB,EAASuB,KAAKc,cACrBf,EAAStB,EAASsB,OAAOe,cAC/B,OAAQd,EAAKe,WAAW/B,IAAiBe,EAAOgB,WAAW/B,GACnD,EACCgB,EAAKgB,SAAShC,IAAiBe,EAAOiB,SAAShC,GAC5C,GACA,GAGVK,EAAqB,SAAC4B,GACxB,IAAMjC,EAAeiC,EAAcH,cACnC,OAAO,SAACI,EAAaC,GACjB,IAAMC,EAASP,EAAgBK,EAAGlC,GAC5BqC,EAASR,EAAgBM,EAAGnC,GAClC,OAAQoC,EAASC,EAAU,EAAKD,EAASC,GAAW,EAAI,IAG1DnB,EAAmB,SAACoB,GACtB,IAAMrB,EAA8B,GADsBsB,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE1D,QAAAC,EAAAC,EAAmBN,EAAnBO,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA0B,CAGtB,IAHsB,IAAfZ,EAAegB,EAAA7C,MAElBmD,GAAQ,EACZC,EAAA,EAAAC,EAA0BlC,EAA1BiC,EAAAC,EAAA5E,OAAA2E,IAAA,CAAK,IAAM9B,EAAW+B,EAAAD,GACd9B,EAAY,GAAGL,SAAWY,EAAKZ,SAC/BK,EAAYgC,KAAKzB,GACjBsB,GAAQ,GAEXA,GACDhC,EAAcmC,KAAK,CAACzB,KAX8B,MAAA0B,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAK,EAAAU,QAAAV,EAAAU,SAAA,WAAAd,EAAA,MAAAC,GAa1D,OAAOxB,EACFb,KAAK,SAAC8B,EAAGC,GACN,IAAMoB,EAAQrB,EAAE,GAAGnB,OAAOyC,cACpBC,EAAQtB,EAAE,GAAGpB,OAAOyC,cAC1B,OAAQD,EAAQE,GAAU,EAAKF,EAAQE,EAAS,EAAI,KAM1DC,EAAa,SAAY1C,GAC3B,OAAO,SAACkB,EAAMC,GACV,IAAMoB,EAAQvC,EAAKkB,GAAGsB,cAChBC,EAAQzC,EAAKmB,GAAGqB,cACtB,OAAQD,EAAQE,GAAU,EAAKF,EAAQE,EAAS,EAAI,IAGtDpC,EAAkBqC,EAAqB,SAACjE,GAAD,OAAcA,EAASuB,OAC9DG,EAAoBuC,EAAuB,SAACtC,GAAD,OAAiBA,EAAY,GAAGL,SClHpE4C,EAAb,SAAA5F,GAAA,SAAA4F,IAAA,OAAAzF,OAAAC,EAAA,EAAAD,CAAAE,KAAAuF,GAAAzF,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAAyF,GAAA7E,MAAAV,KAAAE,YAAA,OAAAJ,OAAAyB,EAAA,EAAAzB,CAAAyF,EAAA5F,GAAAG,OAAA0B,EAAA,EAAA1B,CAAAyF,EAAA,EAAA9D,IAAA,SAAAC,MAAA,WAEQ,OAAOQ,EAAA,cAACC,EAAA,KAAD,CACHqD,KAAK,QACLC,UAAU,uBAJtBF,EAAA,CAAsC/B,aCazBkC,EAAb,SAAA/F,GACI,SAAA+F,EAAY3E,GAAc,IAAAlB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0F,IACtB7F,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAA4F,GAAAjF,KAAAT,KAAMe,KA+BV4E,aAAe,SAACjE,GACZ7B,EAAK+F,SAAS,CACVhE,aAAcF,EAAMvB,OAAS,EACzBuB,OAAQ4C,KAnCMzE,EAsC1BoB,aAAe,SAACsC,GACZ1D,EAAKkB,MAAM8E,QAAQb,KAAK,YAAArE,OAAc4C,EAAKuC,OApC3CC,MAAM,sBACDC,KAAK,SAACC,GAAD,OAAOA,EAAEC,SACdF,KAAK,SAAChF,GAAD,OAAcnB,EAAK+F,SAAS,CAAE5E,eAgBxC,IAAMmF,EAAWtG,EAAKkB,MAAMqF,MAAMC,OAAOF,SArBnB,YAsBL7B,IAAb6B,GAEAG,UAAQC,MAAMJ,GAElBtG,EAAK2G,MAAQ,GA1BS3G,EAD9B,OAAAC,OAAAyB,EAAA,EAAAzB,CAAA4F,EAAA/F,GAAAG,OAAA0B,EAAA,EAAA1B,CAAA4F,EAAA,EAAAjE,IAAA,oBAAAC,MAAA,WA+BQ+E,OAAOC,SAAS,EAAG,KA/B3B,CAAAjF,IAAA,SAAAC,MAAA,WA0Ca,IAAAiF,EAAA3G,KACGgB,EAAahB,KAAKwG,MAAlBxF,SACAY,EAAiB5B,KAAKwG,MAAtB5E,aACR,YAAoB0C,IAAbtD,EACHkB,EAAA,cAAC0E,EAAD,MAEA1E,EAAA,yBACIA,EAAA,cAACC,EAAA,WAAW0E,MAAZ,qBAAgC7F,EAASb,OAAzC,KACA+B,EAAA,cAACC,EAAA,MAAM2E,OAAP,CACIC,YAAY,cACZC,YAAY,SACZxB,KAAK,UACLyB,SAAU,SAACC,GAAD,OAAOP,EAAKhB,aAAauB,EAAEC,OAAOzF,QAC5C0F,YAAY,IAEhBlF,EAAA,cAACmF,EAAD,CACIrG,SAAUA,EACVY,aAAcA,EACdX,aAAcjB,KAAKiB,oBA5DvCyE,EAAA,CAAgClC,aCPnB8D,UARWC,aAAhBV,MAAgBU,aAATC,KAQf,SAAA7H,GACI,SAAA2H,EAAYvG,GAAc,IAAAlB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsH,IACtBzH,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAAwH,GAAA7G,KAAAT,KAAMe,KACDyF,MAAQ,GAFS3G,EAD9B,OAAAC,OAAAyB,EAAA,EAAAzB,CAAAwH,EAAA3H,GAAAG,OAAA0B,EAAA,EAAA1B,CAAAwH,EAAA,EAAA7F,IAAA,SAAAC,MAAA,WAKa,IAAAZ,EACqDd,KAAKe,MAAvDwC,EADHzC,EACGyC,KAAMkE,EADT3G,EACS2G,uBAAwBC,EADjC5G,EACiC4G,gBAC9BC,EAAapE,EAAboE,SACR,OAAOzF,EAAA,qBACHuD,UAAU,mBAETkC,EAASxH,OAAS,GACf+B,EAAA,yBACKyF,EAAS7F,IAAI,SAAC8F,EAASC,GAAV,OACV3F,EAAA,cAACC,EAAA,OAAD,CACIV,IAAG,GAAAd,OAAKkH,GACRrF,QAAS,kBAAMkF,EAAgBG,IAC/BzE,KAAMwE,IAAYH,EACd,UAAY,WAGfG,EAAQhF,cArBrC0E,EAAA,CAAqC9D,cCIxBsE,GAZsBP,aAA3BV,MAA2BU,aAApBC,KAAoBD,aAAdQ,UAYrB,SAAApI,GAKI,SAAAmI,EAAY/G,GAAc,IAAAlB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8H,IACtBjI,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAAgI,GAAArH,KAAAT,KAAMe,KAJViH,oBAG0B,EAAAnI,EAF1BoI,wBAE0B,EAAApI,EAI1BqI,cAAgB,WACZrI,EAAKkB,MAAMyB,WALW3C,EAO1BsI,aAAe,SAACjB,GACZrH,EAAKmI,eAAiBvB,OAAO2B,YAAYC,MACzCxI,EAAKoI,mBAAqB,CACtBK,EAAGpB,EAAEqB,eAAe,GAAGC,QACvBC,EAAGvB,EAAEqB,eAAe,GAAGG,UAXL7I,EAc1B8I,WAAa,SAACzB,GAEV,IAAM0B,EAASnC,OAAO2B,YAAYC,MAASxI,EAAKmI,eAC1Ca,EAAS,CACXP,EAAGpB,EAAEqB,eAAe,GAAGC,QAAW3I,EAAKoI,mBAA8BK,EACrEG,EAAGvB,EAAEqB,eAAe,GAAGG,QAAW7I,EAAKoI,mBAA8BQ,GAEnEK,EAAaC,KAAKC,KAAKD,KAAKE,IAAIJ,EAAOP,EAAG,GAAKS,KAAKE,IAAIJ,EAAOJ,EAAG,IACpEG,GAAU,KAAOE,GAAc,IAE/BjJ,EAAKkB,MAAMyB,WAtBf3C,EAAK2G,MAAQ,GAFS3G,EAL9B,OAAAC,OAAAyB,EAAA,EAAAzB,CAAAgI,EAAAnI,GAAAG,OAAA0B,EAAA,EAAA1B,CAAAgI,EAAA,EAAArG,IAAA,SAAAC,MAAA,WAgCa,IAECwH,EADclJ,KAAKe,MAAjB6G,QACoBuB,QAAQC,MAAM,MAC1C,OAAOlH,EAAA,qBACHgG,cAAelI,KAAKkI,cACpBC,aAAcnI,KAAKmI,aACnBQ,WAAY3I,KAAK2I,YAEhBO,EAAYpH,IAAI,SAACuH,EAAKxB,GAAN,OACb3F,EAAA,qBACIT,IAAKoG,EACLpC,UAAU,iBAET4D,UA7CrBvB,EAAA,CAAiCtE,uBCVpB8F,EAAmB,CAI5BC,IAAK,IAILC,IAAK,GAILC,QAAS,KASPC,EAAyB,SAACnG,GAAD,aAAA5C,OAAsC4C,EAAKjC,KAO7DqI,EAAyB,SAClCpG,GAGA,QAAqBe,IAAjBsF,aAA4B,CAC5B,IAAMC,EAAkBD,aAAaE,QAAQJ,EAAuBnG,IACpE,GAAwB,OAApBsG,EACA,OAAOE,OAAOF,GAEtB,YAAyBvF,IAAlBf,EAAKyG,SACRzG,EAAKyG,SAAWV,EAAiBG,SAQ5BQ,EAA0B,SACnC1G,EACA2G,EACAC,GAEA,IAAMC,OAAwB9F,IAAb6F,EACbP,aACAO,EAEEC,GAINA,EAAQC,QAAQX,EAAuBnG,GAAO+G,OAAOJ,KC5D5CK,EAAO,SAACC,EAAgBjB,EAAaC,GAA9B,OAChBD,EAAMiB,GAAUhB,EAAMD,ICCX/B,GAASD,aAAhBV,MAAgBU,aAATC,MAUFiD,EAAb,SAAA9K,GACI,SAAA8K,EAAY1J,GAAc,IAAAlB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyK,IACtB5K,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAA2K,GAAAhK,KAAAT,KAAMe,KAGV2J,eAAiB,SAAChJ,GACd7B,EAAKkB,MAAM4J,WAAWC,EAA8BlJ,KAL9B7B,EAO1BgL,kBAAoB,SAACnJ,GAEjBuI,EACIpK,EAAKkB,MAAM+J,YACXF,EAA8BlJ,KATlC7B,EAAK2G,MAAQ,GAFS3G,EAD9B,OAAAC,OAAAyB,EAAA,EAAAzB,CAAA2K,EAAA9K,GAAAG,OAAA0B,EAAA,EAAA1B,CAAA2K,EAAA,EAAAhJ,IAAA,SAAAC,MAAA,WAea,IAAAZ,EAC0Cd,KAAKe,MAA5CgK,EADHjK,EACGiK,QAASb,EADZpJ,EACYoJ,gBAAiBc,EAD7BlK,EAC6BkK,SAClC,OAAO9I,EAAA,yBACHA,EAAA,cAACC,EAAA,QAAD,CACIO,MAAM,uDACNuI,gBAAiB,GAEjB/I,EAAA,cAACC,EAAA,OAAD,CACIK,QAASwI,EACT5H,KAAM2H,EAAU,UAAY,WAFhC,cAAApK,OAIoBoK,EAAU,KAAO,SAGzC7I,EAAA,cAACC,EAAA,OAAD,CACIsD,UAAU,mBACV8D,IAAK,EACLC,IAAK,IACL9H,MAAOwJ,EAA8BhB,GACrCiB,MAAKrL,OAAAsL,EAAA,EAAAtL,CAAA,GACAoL,EAA8B5B,EAAiBG,SAAW,IAE/DxC,SAAUjH,KAAK0K,eACfW,cAAerL,KAAK6K,oBAExB3I,EAAA,qBACIuD,UAAU,sBAEVvD,EAAA,cAACoJ,EAAD,CACI7F,UAAU,wBADd,GAAA9E,OAKOoI,KAAKwC,MAAMrB,EAAkB,IALpC,SAAAvJ,OAK+CoI,KAAKwC,MAAMrB,GAAmB,GAAK,EAAInB,KAAKwC,MAAMrB,GAAmB,GAAK,OAAS,WAhDlJO,EAAA,CAAsCjH,aAuDhC0H,EAAgC,SAAChB,GAAD,OAA8CK,GAC/EL,EAAkBZ,EAAiBC,MAAQD,EAAiBE,IAAMF,EAAiBC,KACpF,EACA,MAEEqB,EAAgC,SAACY,GAAD,OAA0CjB,EAC3EiB,EAAyB,IAC1BlC,EAAiBC,IACjBD,EAAiBE,eCrEb3C,EAAgBU,aAAhBV,MAkBK4E,GAlBWlE,aAATC,KAkBf,SAAA7H,GAOI,SAAA8L,EAAY1K,GAAc,IAAAlB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyL,IACtB5L,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAA2L,GAAAhL,KAAAT,KAAMe,KANV2K,kBAK0B,EAAA7L,EAJ1B8L,oBAA8B,EAIJ9L,EAH1B+L,0BAG0B,EAAA/L,EAF1BgM,mBAA6B,EAEHhM,EA8C1B6H,gBAAkB,SAACoE,GACfjM,EAAKkB,MAAM8E,QAAQb,KAAnB,SAAArE,OACad,EAAKkB,MAAMqF,MAAMC,OAAO0F,IADrC,KAAApL,OAC4CmL,KAhDtBjM,EAmD1BmM,cAAgB,WACZC,gBAAcC,eApDQrM,EAsD1BsM,mBAAqB,WACb,qBAAsBtM,EAAK2G,OAC3B3G,EAAK+F,SAAS,CACVwG,kBAAmBvM,EAAK2G,MAAM4F,oBAzDhBvM,EA4D1BwM,qBAAuB,SAACnC,GACpBrK,EAAK+F,SAAS,CACVsE,qBA9DkBrK,EAiE1ByM,qBAAuB,WACnBzM,EAAKkB,MAAM8E,QAAQb,KAAK,MAlEFnF,EAoE1B0M,iBAAmB,WACf,IAAMC,EAAO/F,OAAO2B,YAAYC,MAChC,GACIxI,EAAK8L,oBACL,qBAAsB9L,EAAK2G,OAC3B3G,EAAK2G,MAAM4F,kBACXvM,EAAK6L,mBACyBpH,IAA9BzE,EAAK+L,qBACP,CACE,IAAM1B,EAAkBrK,EAAK2G,MAAM0D,gBAE7BuC,EADM5M,EAAK6L,aACKgB,wBAIhBC,GAHYF,EAAUG,OAASH,EAAUI,IACxBpG,OAAOqG,cACdN,EAAO3M,EAAK+L,uBACoD,IAAlB1B,GACxDrK,EAAKgM,mBAELkB,EAAsBhE,KAAKwC,MAAMoB,GACjCK,EAAuBL,EAAeI,EAC5ClN,EAAKgM,mBAAqBmB,EAE1BvG,OAAOwG,SAAS,EAAGF,GACnBtG,OAAOyG,sBAAsBrN,EAAK0M,uBAElC9F,OAAOyG,sBAAsBrN,EAAK0M,kBAClC1M,EAAKgM,mBAAqB,EAG9BhM,EAAK+L,qBAAuBY,GAjGN,IAEdT,EAAQhL,EAAMqF,MAAMC,OAApB0F,IAFc,OAGtBhG,MAAK,YAAApF,OAAaoL,IACb/F,KAAK,SAACC,GAAD,OAAOA,EAAEC,SACdiH,MAAM,WAGHtN,EAAKkB,MAAM8E,QAAQuH,QAAQ,8BAE9BpH,KAAK,SAACzC,QACUe,IAATf,GACA1D,EAAKwN,uBAAuB9J,EAAMxC,KAE9ClB,EAAK2G,MAAQ,GAdS3G,EAP9B,OAAAC,OAAAyB,EAAA,EAAAzB,CAAA2L,EAAA9L,GAAAG,OAAA0B,EAAA,EAAA1B,CAAA2L,EAAA,EAAAhK,IAAA,oBAAAC,MAAA,WAwBQ1B,KAAK2L,oBAAqB,EAC1BlF,OAAOyG,sBAAwBzG,OAAOyG,uBACjC,SAACI,GAAD,OAAsBC,WAAWD,EAAM,KAC5C7G,OAAOyG,sBAAsBlN,KAAKuM,kBAGlC9F,OAAOC,SAAS,EAAG,KA9B3B,CAAAjF,IAAA,uBAAAC,MAAA,WAiCQ1B,KAAK2L,oBAAqB,IAjClC,CAAAlK,IAAA,4BAAAC,MAAA,SAmC8BX,GAClB,SAAUf,KAAKwG,OACfxG,KAAKqN,uBAAuBrN,KAAKwG,MAAMjD,KAAMxC,KArCzD,CAAAU,IAAA,yBAAAC,MAAA,SAuC2B6B,EAAYxC,GAAc,IACrC+K,EAAyB/K,EAAMqF,MAAMC,OAArCyF,qBACF0B,EAAkBjK,EAAKoE,cACCrD,IAAzBwH,GAAsCA,EAAuBvI,EAAKoE,SAASxH,OACxE2L,EACA,GAER9L,KAAK4F,SAAS,CACVrC,OACAiK,kBACAtD,gBAAiBP,EAAuB6D,GACxCpB,kBAAkB,MAlD9B,CAAA3K,IAAA,SAAAC,MAAA,WA0Ga,IAAAiF,EAAA3G,KACL,GAAO,SAAUA,KAAKwG,MAEf,KAAAiH,EACkEzN,KAAKwG,MAAlEjD,EADLkK,EACKlK,KAAMiK,EADXC,EACWD,gBAAiBpB,EAD5BqB,EAC4BrB,iBAAkBlC,EAD9CuD,EAC8CvD,gBACjD,OAAOhI,EAAA,qBACHwL,IAAK,SAACA,GAAD,OAAS/G,EAAK+E,aAAegC,IAElCxL,EAAA,cAACyL,EAAD,KAAQpK,EAAKZ,QACbT,EAAA,cAACyL,EAAD,CAAOC,MAAO,GAAIrK,EAAKX,MACvBV,EAAA,yBACIA,EAAA,cAAC2L,EAAD,CACItK,KAAMA,EACNkE,uBAAwB+F,EACxB9F,gBAAiB1H,KAAK0H,kBAE1BxF,EAAA,cAACC,EAAA,MAAD,CACIsD,UAAU,sBACVqI,UAAW,GAEX5L,EAAA,cAAC6L,EAAD,CACIjD,YAAa0C,EACbzC,QAASqB,EACTlC,gBAAiBA,EACjBc,SAAUhL,KAAKmM,mBACfxB,WAAY3K,KAAKqM,yBAI7BnK,EAAA,yBACAA,EAAA,cAACC,EAAA,IAAD,CAAK6L,MAAM,QAAQR,EAAgBS,YACH,WAA/BT,EAAgBS,YACb/L,EAAA,cAACC,EAAA,IAAD,CAAK6L,MAAM,WAAWR,EAAgBU,QAE1ChM,EAAA,cAACiM,EAAD,CACI5K,KAAMA,EACNqE,QAAS4F,EACThL,QAASxC,KAAKmM,qBAElBjK,EAAA,yBACAA,EAAA,yBACIA,EAAA,cAACC,EAAA,OAAD,CACIK,QAASxC,KAAKgM,eADlB,gBAKA9J,EAAA,cAACC,EAAA,OAAD,CACIK,QAASxC,KAAKsM,sBADlB,uBA5CR,OAAOpK,EAAA,cAAC0E,EAAD,UA5GnB6E,EAAA,CAAiCjI,cC1BlBgE,GAASD,aAAhBV,MAAgBU,aAATC,MAIF4G,EAAb,SAAAzO,GAAA,SAAAyO,IAAA,OAAAtO,OAAAC,EAAA,EAAAD,CAAAE,KAAAoO,GAAAtO,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAAsO,GAAA1N,MAAAV,KAAAE,YAAA,OAAAJ,OAAAyB,EAAA,EAAAzB,CAAAsO,EAAAzO,GAAAG,OAAA0B,EAAA,EAAA1B,CAAAsO,EAAA,EAAA3M,IAAA,SAAAC,MAAA,WAEQ,OAAOQ,EAAA,yBACHA,EAAA,cAACmM,EAAD,+BAHZD,EAAA,CAA8B5K,aCMxB8K,cACF,SAAAA,EAAYvN,GAAc,IAAAlB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsO,IACtBzO,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,KAAAF,OAAAU,EAAA,EAAAV,CAAAwO,GAAA7N,KAAAT,KAAMe,KAODyF,MAAQ,GARS3G,wEAUjB,IACG0O,EAAUvO,KAAKwG,MAAf+H,MACR,OAAOrM,EAAA,qBACHsM,MAAO,CACHC,gBAAiBF,EAAK,OAAA5N,OAAU4N,EAAV,KAAqB,GAC3CG,eAAgB,YAChBC,mBAAoB,SACpBC,iBAAkB,cAGtB1M,EAAA,cAAC2M,EAAA,EAAD,KACI3M,EAAA,cAAC4M,EAAA,EAAD,KACI5M,EAAA,cAAC4M,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvJ,IACjCxD,EAAA,cAAC4M,EAAA,EAAD,CAAOE,KAAK,mBAAmBC,UAAWvJ,IAC1CxD,EAAA,cAAC4M,EAAA,EAAD,CAAOE,KAAK,oCAAoCC,UAAWxD,IAC3DvJ,EAAA,cAAC4M,EAAA,EAAD,CAAOG,UAAWb,cA1BpB5K,aAiCZ0L,EAAcC,SAASC,eAAe,QAC5CC,iBAAOnN,EAAA,cAACoN,EAAD,MAASJ","file":"static/js/main.e7ff31d0.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { Tree, Icon, List } from \"antd/lib\"\r\nconst { TreeNode } = Tree\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    searchString?: string\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\ninterface State {}\r\nexport class SongList extends React.Component<Props, State> {\r\n    onSelectTreeNode = (selectedKeys: string[]) => {\r\n        const { songList, onSelectSong } = this.props\r\n        const selectedTreeNodeKey = selectedKeys[0]\r\n\r\n        // Check if selected Node was a song.\r\n        const selectedSong = songList.find((songInfo) =>\r\n            songInfo.id === selectedTreeNodeKey\r\n        )\r\n        if (selectedSong)\r\n            onSelectSong(selectedSong)\r\n    }\r\n    render() {\r\n        const { songList, searchString, onSelectSong } = this.props\r\n        if (! searchString) {\r\n            const songsByArtist = mapSongsByArtist(songList)\r\n                .sort(sortArtistsByName)\r\n                .map((artistSongs) => artistSongs.sort(sortSongsByName))\r\n            return <Tree\r\n                showIcon\r\n                switcherIcon={<Icon type=\"down\" />}\r\n                onSelect={this.onSelectTreeNode}\r\n            >\r\n                {songsByArtist.map((artistSongs, iArtist) => {\r\n                    const key = `${iArtist}`\r\n                    return <TreeNode\r\n                        key={key}\r\n                        title={`${artistSongs[0].artist} (${artistSongs.length})`}\r\n                    >\r\n                        {artistSongs.map((song) =>\r\n                            <TreeNode\r\n                                key={song.id}\r\n                                title={song.name}\r\n                            />\r\n                        )}\r\n                    </TreeNode>\r\n                })}\r\n            </Tree>\r\n        } else {\r\n            const songsSortedBySearchString = songList\r\n                // Copy Array.\r\n                .map((item) => item)\r\n                .sort(SearchStringSorter(searchString))\r\n            return <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={songsSortedBySearchString}\r\n                renderItem={(songInfo) => (\r\n                    <List.Item\r\n                        onClick={() => onSelectSong(songInfo)}\r\n                    >\r\n                        <List.Item.Meta\r\n                            title={`${songInfo.artist} - ${songInfo.name}`}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        }\r\n    }\r\n}\r\nconst _songSimilarity = (songInfo: SongInfo, searchString: string): number => {\r\n    const name = songInfo.name.toLowerCase()\r\n    const artist = songInfo.artist.toLowerCase()\r\n    return (name.startsWith(searchString) || artist.startsWith(searchString)) ?\r\n            1 :\r\n            (name.includes(searchString) || artist.includes(searchString) ?\r\n                0.5 :\r\n                0\r\n            )\r\n}\r\nconst SearchStringSorter = (_searchString: string) => {\r\n    const searchString = _searchString.toLowerCase()\r\n    return (a: SongInfo, b: SongInfo) => {\r\n        const aScore = _songSimilarity(a, searchString)\r\n        const bScore = _songSimilarity(b, searchString)\r\n        return (aScore < bScore) ? 1 : (aScore > bScore) ? -1 : 0\r\n    }\r\n}\r\nconst mapSongsByArtist = (songs: SongInfo[]): SongInfo[][] => {\r\n    const songsByArtist: SongInfo[][] = []\r\n    for (const song of songs) {\r\n        // Check for existing item with same artist.\r\n        let added = false\r\n        for (const artistSongs of songsByArtist)\r\n            if (artistSongs[0].artist === song.artist) {\r\n                artistSongs.push(song)\r\n                added = true\r\n            }\r\n        if (!added)\r\n            songsByArtist.push([song])\r\n    }\r\n    return songsByArtist\r\n        .sort((a, b) => {\r\n            const textA = a[0].artist.toUpperCase()\r\n            const textB = b[0].artist.toUpperCase()\r\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n        })\r\n}\r\n/**\r\n * Sorter factory for objects with names.\r\n */\r\nconst SortByName = function<T>(name: (o: T) => string) {\r\n    return (a: T, b: T): -1 | 1 | 0 => {\r\n        const textA = name(a).toUpperCase()\r\n        const textB = name(b).toUpperCase()\r\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n    }\r\n}\r\nconst sortSongsByName = SortByName<SongInfo>((songInfo) => songInfo.name)\r\nconst sortArtistsByName = SortByName<SongInfo[]>((artistSongs) => artistSongs[0].artist)\r\n","import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class LoadingIndicator extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absoluteCenter\"\r\n        />\r\n    }\r\n}\r\n","\r\nimport * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { SongList } from \"./SongList\"\r\nimport { Button, Layout, Typography, Icon, Input, message } from \"antd/lib\"\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\";\r\nimport { Navigatable } from \"../common/navigation\"\r\n\r\ninterface Props extends Navigatable<{\r\n    /**\r\n     * Optional error message, in case user was automatically redirected to this view, because of an error.\r\n     */\r\n    errorMsg?: string\r\n}> {}\r\ninterface State {\r\n    songList?: SongInfo[]\r\n    searchString?: string\r\n}\r\nexport class SelectSong extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        // Read song list.\r\n        fetch(\"/content/list.json\")\r\n            .then((r) => r.json())\r\n            .then((songList) => this.setState({ songList }))\r\n            // For development, auto traversal of GUI. OUTDATED, should use history to navigate.\r\n            // .then(() => {\r\n            //     const songList = this.state.songList as SongInfo[]\r\n            //     const partialSongInfo = songList.find((songInfo) => songInfo.name.includes(\"Nice Guy\")) as SongInfo\r\n            //     this.getFullSongInfo(partialSongInfo)\r\n            //         .then((song) => {\r\n            //             this.setState({\r\n            //                 subState: {\r\n            //                     id: \"display-song\",\r\n            //                     partialSongInfo,\r\n            //                     song\r\n            //                 }\r\n            //             })\r\n            //         })\r\n            // })\r\n        const errorMsg = this.props.match.params.errorMsg\r\n        if (errorMsg !== undefined) {\r\n            // Display error message as a popup, that disappears automatically.\r\n            message.error(errorMsg)\r\n        }\r\n        this.state = {}\r\n    }\r\n    componentDidMount() {\r\n        // Scroll to top of page always. TODO: Use decorator?\r\n        window.scrollTo(0, 0)\r\n    }\r\n    onSearchSong = (value: string) => {\r\n        this.setState({\r\n            searchString: value.length > 0 ?\r\n                value : undefined\r\n        })\r\n    }\r\n    onSelectSong = (song: SongInfo) => {\r\n        this.props.history.push(\"/song/\" + `${song.url}`)\r\n    }\r\n    render() {\r\n        const { songList } = this.state\r\n        const { searchString } = this.state\r\n        return songList === undefined ?\r\n            <LoadingIndicator/>\r\n            :\r\n            <div>\r\n                <Typography.Title>Select song ({songList.length})</Typography.Title>\r\n                <Input.Search\r\n                    placeholder=\"Search text\"\r\n                    enterButton=\"Search\"\r\n                    size=\"default\"\r\n                    onChange={(e) => this.onSearchSong(e.target.value)}\r\n                    allowClear={true}\r\n                />\r\n                <SongList\r\n                    songList={songList}\r\n                    searchString={searchString}\r\n                    onSelectSong={this.onSelectSong}\r\n                />\r\n            </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    defaultSelectedVersion: SongVersion\r\n    onSelectVersion: (selectedVersionIndex: number) => void\r\n}\r\ninterface State {}\r\nexport class VersionSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { song, defaultSelectedVersion, onSelectVersion } = this.props\r\n        const { versions } = song\r\n        return <div\r\n            className=\"versionSelector\"\r\n        >\r\n            {versions.length > 1 &&\r\n                <div>\r\n                    {versions.map((version, i) =>\r\n                        <Button\r\n                            key={`${i}`}\r\n                            onClick={() => onSelectVersion(i)}\r\n                            type={version === defaultSelectedVersion ?\r\n                                \"primary\" : \"default\"\r\n                            }\r\n                        >\r\n                            {version.name}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Row, Col } from \"antd/lib\"\r\nconst { Title, Text, Paragraph } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    version: SongVersion\r\n    onClick: () => void\r\n}\r\ninterface State {}\r\ninterface Point {\r\n    x: number\r\n    y: number\r\n}\r\nexport class SongContent extends React.Component<Props, State> {\r\n\r\n    touchStartTime?: number\r\n    touchStartLocation?: Point\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onDoubleClick = () => {\r\n        this.props.onClick()\r\n    }\r\n    onTouchStart = (e: React.TouchEvent) => {\r\n        this.touchStartTime = window.performance.now()\r\n        this.touchStartLocation = {\r\n            x: e.changedTouches[0].clientX,\r\n            y: e.changedTouches[0].clientY\r\n        }\r\n    }\r\n    onTouchEnd = (e: React.TouchEvent) => {\r\n        // Differentiate between pokes and sweeps.\r\n        const tDelta = window.performance.now() - (this.touchStartTime as number)\r\n        const pDelta = {\r\n            x: e.changedTouches[0].clientX - (this.touchStartLocation as Point ).x,\r\n            y: e.changedTouches[0].clientY - (this.touchStartLocation as Point ).y\r\n        }\r\n        const pDeltaDist = Math.sqrt(Math.pow(pDelta.x, 2) + Math.pow(pDelta.y, 2))\r\n        if (tDelta <= 150 && pDeltaDist <= 20) {\r\n            // Poke.\r\n            this.props.onClick()\r\n        }\r\n    }\r\n    render() {\r\n        const { version } = this.props\r\n        const contentRows = version.content.split(\"\\n\")\r\n        return <div\r\n            onDoubleClick={this.onDoubleClick}\r\n            onTouchStart={this.onTouchStart}\r\n            onTouchEnd={this.onTouchEnd}\r\n        >\r\n            {contentRows.map((row, i) =>\r\n                <pre\r\n                    key={i}\r\n                    className=\"songParagraph\"\r\n                >\r\n                    {row}\r\n                </pre>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n","import { SongVersion } from \"./song\";\r\n\r\n/**\r\n * Collection of static AutoScrollSpeed values.\r\n */\r\nexport const AutoScrollValues = {\r\n    /**\r\n     *\r\n     */\r\n    min: 10 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    max: 1 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    default: 3 * 60 as AutoScrollSpeed\r\n}\r\n/**\r\n * Number presents **seconds** that it should take to scroll the whole content from start to end.\r\n */\r\nexport type AutoScrollSpeed = number\r\n/**\r\n *\r\n */\r\nconst _SongAutoScrollSpeedID = (song: SongVersion): string => `ass-${song.id}`\r\n/**\r\n * Get AutoScrollSpeed for a Version of a Song. Included factors are:\r\n * - localStorage\r\n * - SongVersion.duration\r\n * - default AutoScrollSpeed\r\n */\r\nexport const getSongAutoScrollSpeed = (\r\n    song: SongVersion\r\n): AutoScrollSpeed => {\r\n    // Check for saved value in localStorage.\r\n    if (localStorage !== undefined) {\r\n        const savedPreference = localStorage.getItem(_SongAutoScrollSpeedID(song))\r\n        if (savedPreference !== null)\r\n            return Number(savedPreference) as AutoScrollSpeed\r\n    }\r\n    return song.duration !== undefined ?\r\n        song.duration : AutoScrollValues.default\r\n}\r\n/**\r\n * Save AutoScrollSpeed for a Version of a Song.\r\n * @param   song                SongVersion\r\n * @param   autoScrollSpeed     AutoScrollSpeed\r\n * @param   mStorage            Mock interface for *localStorage*\r\n */\r\nexport const saveSongAutoScrollSpeed = (\r\n    song: SongVersion,\r\n    autoScrollSpeed: AutoScrollSpeed,\r\n    mStorage?: Storage | null\r\n) => {\r\n    const storage = (mStorage === undefined) ?\r\n        localStorage :\r\n        mStorage\r\n\r\n    if (! storage)\r\n        // localStorage is not available.\r\n        return\r\n\r\n    storage.setItem(_SongAutoScrollSpeedID(song), String(autoScrollSpeed))\r\n}\r\n","\r\n/**\r\n *\r\n */\r\nexport const lerp = (amount: number, min: number, max: number): number =>\r\n    min + amount * (max - min)\r\n/**\r\n * Pure function for *flattening* Arrays.\r\n */\r\nexport const flatten = <T> (arrayOfArrays: T[][]): T[] => {\r\n    const arr: T[] = []\r\n    const len = arrayOfArrays.length\r\n    for (let i = 0; i < len; i ++) {\r\n        const arr2 = arrayOfArrays[i]\r\n        const len2  = arr2.length\r\n        for (let i2 = 0; i2 < len2; i2 ++)\r\n            arr.push(arr2[len2])\r\n    }\r\n    return arr\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Tooltip, Slider } from \"antd/lib\"\r\nimport { AutoScrollValues, AutoScrollSpeed, saveSongAutoScrollSpeed } from \"../../datastructures/autoScroll\"\r\nimport { SliderValue } from \"antd/lib/slider\";\r\nimport { lerp } from \"../../utils\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    songVersion: SongVersion\r\n    enabled: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n    onToggle: () => void\r\n    onSetSpeed: (autoScrollSpeed: AutoScrollSpeed) => void\r\n}\r\ninterface State {}\r\nexport class AutoScrollConfig extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onSliderChange = (value: SliderValue) => {\r\n        this.props.onSetSpeed(_sliderValueToAutoScrollSpeed(value as number))\r\n    }\r\n    afterSliderChange = (value: SliderValue) => {\r\n        // Save preference.\r\n        saveSongAutoScrollSpeed(\r\n            this.props.songVersion,\r\n            _sliderValueToAutoScrollSpeed(value as number)\r\n        )\r\n    }\r\n    render() {\r\n        const { enabled, autoScrollSpeed, onToggle } = this.props\r\n        return <div>\r\n            <Tooltip\r\n                title=\"Also activated by poking / double-clicking anywhere!\"\r\n                mouseEnterDelay={1}\r\n            >\r\n                <Button\r\n                    onClick={onToggle}\r\n                    type={enabled ? \"primary\" : \"default\"}\r\n                >\r\n                    {`Autoscroll ${ enabled ? \"ON\" : \"OFF\" }`}\r\n                </Button>\r\n            </Tooltip>\r\n            <Slider\r\n                className=\"autoScrollSlider\"\r\n                min={0}\r\n                max={100}\r\n                value={_autoScrollSpeedToSliderValue(autoScrollSpeed)}\r\n                marks={{\r\n                    [_autoScrollSpeedToSliderValue(AutoScrollValues.default)]: \"\"\r\n                }}\r\n                onChange={this.onSliderChange}\r\n                onAfterChange={this.afterSliderChange}\r\n            />\r\n            <div\r\n                className=\"autoScrollValueDiv\"\r\n            >\r\n                <Text\r\n                    className=\"autoScrollValueLabel\"\r\n                >\r\n                    {\r\n                    // tslint:disable-next-line: max-line-length\r\n                    `${Math.floor(autoScrollSpeed / 60)} min ${Math.floor(autoScrollSpeed) % 60 > 0 ? Math.floor(autoScrollSpeed) % 60 + \" sec\" : \"\"}`\r\n                    }\r\n                </Text>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\nconst _autoScrollSpeedToSliderValue = (autoScrollSpeed: AutoScrollSpeed): number => lerp(\r\n    (autoScrollSpeed - AutoScrollValues.min) / (AutoScrollValues.max - AutoScrollValues.min),\r\n    0,\r\n    100\r\n)\r\nconst _sliderValueToAutoScrollSpeed = (sliderValue: number): AutoScrollSpeed => lerp(\r\n    (sliderValue as number) / 100,\r\n    AutoScrollValues.min,\r\n    AutoScrollValues.max\r\n)\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Affix, Tag } from \"antd/lib\"\r\nimport { VersionSelector } from \"./VersionSelector\"\r\nimport { SongContent } from \"./SongContent\"\r\nimport { AutoScrollConfig } from \"./AutoScrollConfig\"\r\nimport { Link, animateScroll } from \"react-scroll\"\r\nimport { AutoScrollSpeed, AutoScrollValues, getSongAutoScrollSpeed } from \"../../datastructures/autoScroll\";\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\";\r\nimport { Navigatable } from \"../common/navigation\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props extends Navigatable<{\r\n    /**\r\n     * Selected song uri.\r\n     */\r\n    uri: string\r\n    /**\r\n     * Selected version index.\r\n     */\r\n    selectedVersionIndex?: number\r\n}> {}\r\ntype State = {} | {\r\n    song: Song\r\n    selectedVersion: SongVersion\r\n    autoScrollActive: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n}\r\nexport class DisplaySong extends React.Component<Props, State> {\r\n\r\n    scrollDivRef?: HTMLDivElement | null\r\n    isCurrentlyMounted: boolean = false\r\n    lastAutoScrollUpdate?: number\r\n    scrollingFractions: number = 0\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        const { uri } = props.match.params\r\n        fetch(`/content/${uri}`)\r\n            .then((r) => r.json())\r\n            .catch(() => {\r\n                // Navigate to start menu, and display error message.\r\n                // TODO: Can we clear navigation history somehow?\r\n                this.props.history.replace(\"/error/\" + `Song not found :(`)\r\n            })\r\n            .then((song: Song | undefined) => {\r\n                if (song !== undefined)\r\n                    this.selectVersionFromProps(song, props)\r\n            })\r\n        this.state = {}\r\n    }\r\n    componentDidMount() {\r\n        this.isCurrentlyMounted = true\r\n        window.requestAnimationFrame = window.requestAnimationFrame ||\r\n            ((clbk: () => void) => setTimeout(clbk, 50))\r\n        window.requestAnimationFrame(this.updateAutoScroll)\r\n\r\n        // Scroll to top of page always. TODO: Use decorator?\r\n        window.scrollTo(0, 0)\r\n    }\r\n    componentWillUnmount() {\r\n        this.isCurrentlyMounted = false\r\n    }\r\n    componentWillReceiveProps(props: Props) {\r\n        if (\"song\" in this.state)\r\n            this.selectVersionFromProps(this.state.song, props)\r\n    }\r\n    selectVersionFromProps(song: Song, props: Props) {\r\n        const { selectedVersionIndex } = props.match.params\r\n        const selectedVersion = song.versions[\r\n            (selectedVersionIndex !== undefined && selectedVersionIndex < song.versions.length) ?\r\n                selectedVersionIndex :\r\n                0\r\n        ]\r\n        this.setState({\r\n            song,\r\n            selectedVersion,\r\n            autoScrollSpeed: getSongAutoScrollSpeed(selectedVersion),\r\n            autoScrollActive: false\r\n        })\r\n    }\r\n    onSelectVersion = (selectedVersionIndex: number) => {\r\n        this.props.history.push(\r\n            `/song/${this.props.match.params.uri}/${selectedVersionIndex}`\r\n        )\r\n    }\r\n    goToBeginning = () => {\r\n        animateScroll.scrollToTop()\r\n    }\r\n    onToggleAutoScroll = () => {\r\n        if (\"autoScrollActive\" in this.state)\r\n            this.setState({\r\n                autoScrollActive: !this.state.autoScrollActive\r\n            })\r\n    }\r\n    onSetAutoScrollSpeed = (autoScrollSpeed: AutoScrollSpeed) => {\r\n        this.setState({\r\n            autoScrollSpeed\r\n        })\r\n    }\r\n    returnToPreviousMenu = () => {\r\n        this.props.history.push(\"/\")\r\n    }\r\n    updateAutoScroll = () => {\r\n        const tNow = window.performance.now()\r\n        if (\r\n            this.isCurrentlyMounted &&\r\n            'autoScrollActive' in this.state &&\r\n            this.state.autoScrollActive &&\r\n            this.scrollDivRef &&\r\n            this.lastAutoScrollUpdate !== undefined\r\n        ) {\r\n            const autoScrollSpeed = this.state.autoScrollSpeed\r\n            const div = this.scrollDivRef\r\n            const divBounds = div.getBoundingClientRect()\r\n            const divHeight = divBounds.bottom - divBounds.top\r\n            const viewPortHeight = window.innerHeight\r\n            const tDelta = (tNow - this.lastAutoScrollUpdate)\r\n            const scrollAmount = (divHeight - viewPortHeight) * tDelta / (autoScrollSpeed * 1000)\r\n                + this.scrollingFractions\r\n\r\n            const scrollAmountInteger = Math.floor(scrollAmount)\r\n            const scrollAmountFraction = scrollAmount - scrollAmountInteger\r\n            this.scrollingFractions = scrollAmountFraction\r\n\r\n            window.scrollBy(0, scrollAmountInteger)\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n        } else {\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n            this.scrollingFractions = 0\r\n        }\r\n\r\n        this.lastAutoScrollUpdate = tNow\r\n    }\r\n    render() {\r\n        if (! (\"song\" in this.state)) {\r\n            return <LoadingIndicator/>\r\n        } else {\r\n            const { song, selectedVersion, autoScrollActive, autoScrollSpeed } = this.state\r\n            return <div\r\n                ref={(ref) => this.scrollDivRef = ref}\r\n            >\r\n                <Title>{song.artist}</Title>\r\n                <Title level={2}>{song.name}</Title>\r\n                <div>\r\n                    <VersionSelector\r\n                        song={song}\r\n                        defaultSelectedVersion={selectedVersion}\r\n                        onSelectVersion={this.onSelectVersion}\r\n                    />\r\n                    <Affix\r\n                        className=\"autoScrollConfigBox\"\r\n                        offsetTop={0}\r\n                    >\r\n                        <AutoScrollConfig\r\n                            songVersion={selectedVersion}\r\n                            enabled={autoScrollActive}\r\n                            autoScrollSpeed={autoScrollSpeed}\r\n                            onToggle={this.onToggleAutoScroll}\r\n                            onSetSpeed={this.onSetAutoScrollSpeed}\r\n                        />\r\n                    </Affix>\r\n                </div>\r\n                <br/>\r\n                <Tag color=\"blue\">{selectedVersion.instrument}</Tag>\r\n                {selectedVersion.instrument === \"guitar\" &&\r\n                    <Tag color=\"volcano\">{selectedVersion.tuning}</Tag>\r\n                }\r\n                <SongContent\r\n                    song={song}\r\n                    version={selectedVersion}\r\n                    onClick={this.onToggleAutoScroll}\r\n                />\r\n                <br/>\r\n                <div>\r\n                    <Button\r\n                        onClick={this.goToBeginning}\r\n                    >\r\n                        To beginning\r\n                    </Button>\r\n                    <Button\r\n                        onClick={this.returnToPreviousMenu}\r\n                    >\r\n                        To song selection\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Typography } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class NotFound extends React.Component<Props, State> {\r\n    render() {\r\n        return <div>\r\n            <Text>Page not found :(</Text>\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\r\nimport { SelectSong } from \"./components/selectSong/SelectSong\"\r\nimport \"./styles.css\";\r\nimport { DisplaySong } from \"./components/displaySong/DisplaySong\";\r\nimport { NotFound } from \"./components/NotFound\"\r\n\r\ninterface Props {}\r\ninterface State {\r\n    bgUrl?: string\r\n}\r\nclass App extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        // fetch(\"bg.png\")\r\n        //     .then((data) => {\r\n        //         this.setState({\r\n        //             bgUrl: data.url\r\n        //         })\r\n        //     })\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { bgUrl } = this.state\r\n        return <div\r\n            style={{\r\n                backgroundImage: bgUrl ? `url(${bgUrl})` : \"\",\r\n                backgroundSize: \"auto 100%\",\r\n                backgroundPosition: \"center\",\r\n                backgroundRepeat: \"no-repeat\"\r\n            }}\r\n        >\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={SelectSong}/>\r\n                    <Route path=\"/error/:errorMsg\" component={SelectSong}/>\r\n                    <Route path=\"/song/:uri/:selectedVersionIndex?\" component={DisplaySong}/>\r\n                    <Route component={NotFound}/>\r\n                </Switch>\r\n            </BrowserRouter >\r\n        </div>\r\n    }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}