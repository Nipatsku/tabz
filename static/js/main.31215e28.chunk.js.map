{"version":3,"sources":["components/startMenu/SongList.tsx","components/startMenu/SongSelector.tsx","components/displaySong/VersionSelector.tsx","components/displaySong/SongContent.tsx","datastructures/autoScroll.ts","utils.ts","components/displaySong/AutoScrollConfig.tsx","components/displaySong/DisplaySong.tsx","components/common/LoadingIndicator.tsx","components/startMenu/StartMenu.tsx","index.tsx"],"names":["TreeNode","Tree","SongList","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","onSelectTreeNode","selectedKeys","_this$props","props","songList","onSelectSong","selectedTreeNodeKey","selectedSong","find","songInfo","id","inherits","createClass","key","value","_this$props2","searchString","songsSortedBySearchString","map","item","sort","SearchStringSorter","react","lib","itemLayout","dataSource","renderItem","Item","onClick","Meta","title","artist","name","songsByArtist","mapSongsByArtist","artistSongs","sortSongsByName","showIcon","switcherIcon","type","onSelect","iArtist","song","React","_songSimilarity","toLowerCase","startsWith","includes","_searchString","a","b","aScore","bScore","songs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","added","_i","_songsByArtist","push","err","return","textA","toUpperCase","textB","SongSelector","onSearchSong","setState","state","_this2","Title","Search","placeholder","enterButton","size","onChange","e","target","allowClear","SongList_SongList","VersionSelector","Typography","Text","defaultSelectedVersion","onSelectVersion","versions","className","version","i","SongContent","Paragraph","divRef","touchStartTime","touchStartLocation","onDoubleClick","onTouchStart","window","performance","now","x","changedTouches","clientX","y","clientY","onTouchEnd","tDelta","pDelta","pDeltaDist","Math","sqrt","pow","contentRows","content","split","ref","row","AutoScrollValues","min","max","default","_SongAutoScrollSpeedID","getSongAutoScrollSpeed","localStorage","savedPreference","getItem","Number","duration","saveSongAutoScrollSpeed","autoScrollSpeed","mStorage","storage","setItem","String","lerp","amount","AutoScrollConfig","onSliderChange","onSetSpeed","_sliderValueToAutoScrollSpeed","afterSliderChange","songVersion","enabled","onToggle","mouseEnterDelay","_autoScrollSpeedToSliderValue","marks","defineProperty","onAfterChange","sliderValue","DisplaySong","songContentRef","isCurrentlyMounted","lastAutoScrollUpdate","scrollingFractions","selectedVersion","goToBeginning","animateScroll","scrollToTop","onToggleAutoScroll","autoScrollActive","onSetAutoScrollSpeed","updateAutoScroll","tNow","divBounds","getDIV","getBoundingClientRect","scrollAmount","bottom","top","innerHeight","scrollAmountInteger","floor","scrollAmountFraction","scrollBy","setTimeout","returnToPrevious","_this$state","DisplaySong_Title","level","VersionSelector_VersionSelector","offsetTop","AutoScrollConfig_AutoScrollConfig","SongContent_SongContent","LoadingIndicator","StartMenu","onClickSelectSong","subState","getFullSongInfo","then","objectSpread","partialSongInfo","fetch","r","json","url","SongSelector_SongSelector","LoadingIndicator_LoadingIndicator","DisplaySong_DisplaySong","App","StartMenu_StartMenu","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.31215e28.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { Tree, Icon, List } from \"antd/lib\"\r\nconst { TreeNode } = Tree\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    searchString?: string\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\ninterface State {}\r\ntype SongSorter = (a: SongInfo, b: SongInfo) => 1 | -1 | 0\r\nexport class SongList extends React.Component<Props, State> {\r\n    onSelectTreeNode = (selectedKeys: string[]) => {\r\n        const { songList, onSelectSong } = this.props\r\n        const selectedTreeNodeKey = selectedKeys[0]\r\n\r\n        // Check if selected Node was a song.\r\n        const selectedSong = songList.find((songInfo) =>\r\n            songInfo.id === selectedTreeNodeKey\r\n        )\r\n        if (selectedSong)\r\n            onSelectSong(selectedSong)\r\n    }\r\n    render() {\r\n        const { songList, searchString, onSelectSong } = this.props\r\n        if (! searchString) {\r\n            const songsByArtist = mapSongsByArtist(songList)\r\n                .map((artistSongs) => artistSongs.sort(sortSongsByName))\r\n            return <Tree\r\n                showIcon\r\n                switcherIcon={<Icon type=\"down\" />}\r\n                onSelect={this.onSelectTreeNode}\r\n            >\r\n                {songsByArtist.map((artistSongs, iArtist) => {\r\n                    const key = `${iArtist}`\r\n                    return <TreeNode\r\n                        key={key}\r\n                        title={artistSongs[0].artist}\r\n                        // icon= TODO\r\n                    >\r\n                        {artistSongs.map((song) =>\r\n                            <TreeNode\r\n                                key={song.id}\r\n                                title={song.name}\r\n                            />\r\n                        )}\r\n                    </TreeNode>\r\n                })}\r\n            </Tree>\r\n        } else {\r\n            const songsSortedBySearchString = songList\r\n                // Copy Array.\r\n                .map((item) => item)\r\n                .sort(SearchStringSorter(searchString))\r\n            return <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={songsSortedBySearchString}\r\n                renderItem={(songInfo) => (\r\n                    <List.Item\r\n                        onClick={() => onSelectSong(songInfo)}\r\n                    >\r\n                        <List.Item.Meta\r\n                            title={`${songInfo.artist} - ${songInfo.name}`}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        }\r\n    }\r\n}\r\nconst _songSimilarity = (songInfo: SongInfo, searchString: string): number => {\r\n    const name = songInfo.name.toLowerCase()\r\n    const artist = songInfo.artist.toLowerCase()\r\n    return (name.startsWith(searchString) || artist.startsWith(searchString)) ?\r\n            1 :\r\n            (name.includes(searchString) || artist.includes(searchString) ?\r\n                0.5 :\r\n                0\r\n            )\r\n}\r\nconst SearchStringSorter = (_searchString: string): SongSorter => {\r\n    const searchString = _searchString.toLowerCase()\r\n    return (a, b) => {\r\n        const aScore = _songSimilarity(a, searchString)\r\n        const bScore = _songSimilarity(b, searchString)\r\n        return (aScore < bScore) ? 1 : (aScore > bScore) ? -1 : 0\r\n    }\r\n}\r\nconst mapSongsByArtist = (songs: SongInfo[]): SongInfo[][] => {\r\n    const songsByArtist: SongInfo[][] = []\r\n    for (const song of songs) {\r\n        // Check for existing item with same artist.\r\n        let added = false\r\n        for (const artistSongs of songsByArtist)\r\n            if (artistSongs[0].artist === song.artist) {\r\n                artistSongs.push(song)\r\n                added = true\r\n            }\r\n        if (!added)\r\n            songsByArtist.push([song])\r\n    }\r\n    return songsByArtist\r\n}\r\nconst sortSongsByName = (a: SongInfo, b: SongInfo): -1 | 1 | 0 => {\r\n    const textA = a.name.toUpperCase()\r\n    const textB = b.name.toUpperCase()\r\n    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n}\r\n","\r\nimport * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { SongList } from \"./SongList\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\ninterface State {\r\n    searchString?: string\r\n}\r\nexport class SongSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onSearchSong = (value: string) => {\r\n        this.setState({\r\n            searchString: value.length > 0 ?\r\n                value : undefined\r\n        })\r\n    }\r\n    render() {\r\n        const { songList, onSelectSong } = this.props\r\n        const { searchString } = this.state\r\n        return <div>\r\n            <Typography.Title>Select song</Typography.Title>\r\n            <Input.Search\r\n                placeholder=\"Search text\"\r\n                enterButton=\"Search\"\r\n                size=\"default\"\r\n                onChange={(e) => this.onSearchSong(e.target.value)}\r\n                allowClear={true}\r\n            />\r\n            <SongList\r\n                songList={songList}\r\n                searchString={searchString}\r\n                onSelectSong={onSelectSong}\r\n            />\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    defaultSelectedVersion: SongVersion\r\n    onSelectVersion: (version: SongVersion) => void\r\n}\r\ninterface State {}\r\nexport class VersionSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { song, defaultSelectedVersion, onSelectVersion } = this.props\r\n        const { versions } = song\r\n        return <div\r\n            className=\"versionSelector\"\r\n        >\r\n            {versions.length > 1 &&\r\n                <div>\r\n                    {versions.map((version, i) =>\r\n                        <Button\r\n                            key={`${i}`}\r\n                            onClick={() => onSelectVersion(version)}\r\n                            type={version === defaultSelectedVersion ?\r\n                                \"primary\" : \"default\"\r\n                            }\r\n                        >\r\n                            {version.name}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Row, Col } from \"antd/lib\"\r\nconst { Title, Text, Paragraph } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    version: SongVersion\r\n    onClick: () => void\r\n}\r\ninterface State {}\r\ninterface Point {\r\n    x: number\r\n    y: number\r\n}\r\nexport class SongContent extends React.Component<Props, State> {\r\n\r\n    divRef?: HTMLDivElement | null\r\n    touchStartTime?: number\r\n    touchStartLocation?: Point\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    getDIV(): HTMLDivElement | undefined {\r\n        return (this.divRef === null || this.divRef === undefined) ?\r\n            undefined :\r\n            this.divRef as HTMLDivElement\r\n    }\r\n    onDoubleClick = () => {\r\n        this.props.onClick()\r\n    }\r\n    onTouchStart = (e: React.TouchEvent) => {\r\n        this.touchStartTime = window.performance.now()\r\n        this.touchStartLocation = {\r\n            x: e.changedTouches[0].clientX,\r\n            y: e.changedTouches[0].clientY\r\n        }\r\n    }\r\n    onTouchEnd = (e: React.TouchEvent) => {\r\n        // Differentiate between pokes and sweeps.\r\n        const tDelta = window.performance.now() - (this.touchStartTime as number)\r\n        const pDelta = {\r\n            x: e.changedTouches[0].clientX - (this.touchStartLocation as Point ).x,\r\n            y: e.changedTouches[0].clientY - (this.touchStartLocation as Point ).y\r\n        }\r\n        const pDeltaDist = Math.sqrt(Math.pow(pDelta.x, 2) + Math.pow(pDelta.y, 2))\r\n        if (tDelta <= 150 && pDeltaDist <= 20) {\r\n            // Poke.\r\n            this.props.onClick()\r\n        }\r\n    }\r\n    render() {\r\n        const { version } = this.props\r\n        const contentRows = version.content.split(\"\\n\")\r\n        return <div\r\n            ref={(ref) => this.divRef = ref}\r\n            onDoubleClick={this.onDoubleClick}\r\n            onTouchStart={this.onTouchStart}\r\n            onTouchEnd={this.onTouchEnd}\r\n        >\r\n            {contentRows.map((row, i) =>\r\n                <pre\r\n                    key={i}\r\n                    className=\"songParagraph\"\r\n                >\r\n                    {row}\r\n                </pre>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n","import { SongVersion } from \"./song\";\r\n\r\n/**\r\n * Collection of static AutoScrollSpeed values.\r\n */\r\nexport const AutoScrollValues = {\r\n    /**\r\n     *\r\n     */\r\n    min: 10 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    max: 1 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    default: 3 * 60 as AutoScrollSpeed\r\n}\r\n/**\r\n * Number presents **seconds** that it should take to scroll the whole content from start to end.\r\n */\r\nexport type AutoScrollSpeed = number\r\n/**\r\n *\r\n */\r\nconst _SongAutoScrollSpeedID = (song: SongVersion): string => `ass-${song.id}`\r\n/**\r\n * Get AutoScrollSpeed for a Version of a Song. Included factors are:\r\n * - localStorage\r\n * - SongVersion.duration\r\n * - default AutoScrollSpeed\r\n */\r\nexport const getSongAutoScrollSpeed = (\r\n    song: SongVersion\r\n): AutoScrollSpeed => {\r\n    // Check for saved value in localStorage.\r\n    if (localStorage !== undefined) {\r\n        const savedPreference = localStorage.getItem(_SongAutoScrollSpeedID(song))\r\n        if (savedPreference !== null)\r\n            return Number(savedPreference) as AutoScrollSpeed\r\n    }\r\n    return song.duration !== undefined ?\r\n        song.duration : AutoScrollValues.default\r\n}\r\n/**\r\n * Save AutoScrollSpeed for a Version of a Song.\r\n * @param   song                SongVersion\r\n * @param   autoScrollSpeed     AutoScrollSpeed\r\n * @param   mStorage            Mock interface for *localStorage*\r\n */\r\nexport const saveSongAutoScrollSpeed = (\r\n    song: SongVersion,\r\n    autoScrollSpeed: AutoScrollSpeed,\r\n    mStorage?: Storage | null\r\n) => {\r\n    const storage = (mStorage === undefined) ?\r\n        localStorage :\r\n        mStorage\r\n\r\n    if (! storage)\r\n        // localStorage is not available.\r\n        return\r\n\r\n    storage.setItem(_SongAutoScrollSpeedID(song), String(autoScrollSpeed))\r\n}\r\n","\r\n/**\r\n *\r\n */\r\nexport const lerp = (amount: number, min: number, max: number): number =>\r\n    min + amount * (max - min)\r\n/**\r\n * Pure function for *flattening* Arrays.\r\n */\r\nexport const flatten = <T> (arrayOfArrays: T[][]): T[] => {\r\n    const arr: T[] = []\r\n    const len = arrayOfArrays.length\r\n    for (let i = 0; i < len; i ++) {\r\n        const arr2 = arrayOfArrays[i]\r\n        const len2  = arr2.length\r\n        for (let i2 = 0; i2 < len2; i2 ++)\r\n            arr.push(arr2[len2])\r\n    }\r\n    return arr\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Tooltip, Slider } from \"antd/lib\"\r\nimport { AutoScrollValues, AutoScrollSpeed, saveSongAutoScrollSpeed } from \"../../datastructures/autoScroll\"\r\nimport { SliderValue } from \"antd/lib/slider\";\r\nimport { lerp } from \"../../utils\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    songVersion: SongVersion\r\n    enabled: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n    onToggle: () => void\r\n    onSetSpeed: (autoScrollSpeed: AutoScrollSpeed) => void\r\n}\r\ninterface State {}\r\nexport class AutoScrollConfig extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onSliderChange = (value: SliderValue) => {\r\n        this.props.onSetSpeed(_sliderValueToAutoScrollSpeed(value as number))\r\n    }\r\n    afterSliderChange = (value: SliderValue) => {\r\n        // Save preference.\r\n        saveSongAutoScrollSpeed(\r\n            this.props.songVersion,\r\n            _sliderValueToAutoScrollSpeed(value as number)\r\n        )\r\n    }\r\n    render() {\r\n        const { enabled, autoScrollSpeed, onToggle } = this.props\r\n        return <div>\r\n            <Tooltip\r\n                title=\"Also activated by poking / double-clicking anywhere!\"\r\n                mouseEnterDelay={1}\r\n            >\r\n                <Button\r\n                    onClick={onToggle}\r\n                    type={enabled ? \"primary\" : \"default\"}\r\n                >\r\n                    {`Autoscroll ${ enabled ? \"ON\" : \"OFF\" }`}\r\n                </Button>\r\n            </Tooltip>\r\n            <Slider\r\n                className=\"autoScrollSlider\"\r\n                min={0}\r\n                max={100}\r\n                value={_autoScrollSpeedToSliderValue(autoScrollSpeed)}\r\n                marks={{\r\n                    [_autoScrollSpeedToSliderValue(AutoScrollValues.default)]: \"\"\r\n                }}\r\n                onChange={this.onSliderChange}\r\n                onAfterChange={this.afterSliderChange}\r\n            />\r\n        </div>\r\n    }\r\n}\r\nconst _autoScrollSpeedToSliderValue = (autoScrollSpeed: AutoScrollSpeed): number => lerp(\r\n    (autoScrollSpeed - AutoScrollValues.min) / (AutoScrollValues.max - AutoScrollValues.min),\r\n    0,\r\n    100\r\n)\r\nconst _sliderValueToAutoScrollSpeed = (sliderValue: number): AutoScrollSpeed => lerp(\r\n    (sliderValue as number) / 100,\r\n    AutoScrollValues.min,\r\n    AutoScrollValues.max\r\n)\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Affix } from \"antd/lib\"\r\nimport { VersionSelector } from \"./VersionSelector\"\r\nimport { SongContent } from \"./SongContent\"\r\nimport { AutoScrollConfig } from \"./AutoScrollConfig\"\r\nimport { Link, animateScroll } from \"react-scroll\"\r\nimport { AutoScrollSpeed, AutoScrollValues, getSongAutoScrollSpeed } from \"../../datastructures/autoScroll\";\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    returnToPrevious: () => void\r\n}\r\ninterface State {\r\n    selectedVersion: SongVersion\r\n    autoScrollActive: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n}\r\nexport class DisplaySong extends React.Component<Props, State> {\r\n\r\n    songContentRef?: SongContent | null\r\n    isCurrentlyMounted: boolean = false\r\n    lastAutoScrollUpdate?: number\r\n    scrollingFractions: number = 0\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        const selectedVersion = this.props.song.versions[0]\r\n        this.state = {\r\n            selectedVersion,\r\n            autoScrollActive: false,\r\n            autoScrollSpeed: getSongAutoScrollSpeed(selectedVersion)\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.isCurrentlyMounted = true\r\n        setTimeout(this.updateAutoScroll)\r\n    }\r\n    componentWillUnmount() {\r\n        this.isCurrentlyMounted = false\r\n    }\r\n    onSelectVersion = (selectedVersion: SongVersion) => {\r\n        this.setState({\r\n            selectedVersion,\r\n            autoScrollSpeed: getSongAutoScrollSpeed(selectedVersion)\r\n        })\r\n    }\r\n    goToBeginning = () => {\r\n        animateScroll.scrollToTop()\r\n    }\r\n    onToggleAutoScroll = () => {\r\n        this.setState({\r\n            autoScrollActive: !this.state.autoScrollActive\r\n        })\r\n    }\r\n    onSetAutoScrollSpeed = (autoScrollSpeed: AutoScrollSpeed) => {\r\n        this.setState({\r\n            autoScrollSpeed\r\n        })\r\n    }\r\n    updateAutoScroll = () => {\r\n        if (!this.isCurrentlyMounted)\r\n            return\r\n\r\n        const tNow = window.performance.now()\r\n        if (\r\n            this.state.autoScrollActive &&\r\n            this.songContentRef &&\r\n            this.lastAutoScrollUpdate !== undefined\r\n        ) {\r\n            const { autoScrollSpeed } = this.state\r\n            const div = this.songContentRef.getDIV() as HTMLDivElement\r\n            const divBounds = div.getBoundingClientRect()\r\n            const divHeight = divBounds.bottom - divBounds.top\r\n            const viewPortHeight = window.innerHeight\r\n            const tDelta = (tNow - this.lastAutoScrollUpdate)\r\n            const scrollAmount = (divHeight - viewPortHeight * 0.20) * tDelta / (autoScrollSpeed * 1000)\r\n                + this.scrollingFractions\r\n\r\n            const scrollAmountInteger = Math.floor(scrollAmount)\r\n            const scrollAmountFraction = scrollAmount - scrollAmountInteger\r\n            this.scrollingFractions = scrollAmountFraction\r\n\r\n            window.scrollBy(0, scrollAmountInteger)\r\n            setTimeout(this.updateAutoScroll, 50)\r\n        } else {\r\n            setTimeout(this.updateAutoScroll, 100)\r\n            this.scrollingFractions = 0\r\n        }\r\n\r\n        this.lastAutoScrollUpdate = tNow\r\n    }\r\n    render() {\r\n        const { song, returnToPrevious } = this.props\r\n        const { selectedVersion, autoScrollActive, autoScrollSpeed } = this.state\r\n        return <div>\r\n            <Title>{song.artist}</Title>\r\n            <Title level={2}>{song.name}</Title>\r\n            <div>\r\n                <VersionSelector\r\n                    song={song}\r\n                    defaultSelectedVersion={selectedVersion}\r\n                    onSelectVersion={this.onSelectVersion}\r\n                />\r\n                <Affix\r\n                    className=\"autoScrollConfigBox\"\r\n                    offsetTop={0}\r\n                >\r\n                    <AutoScrollConfig\r\n                        songVersion={selectedVersion}\r\n                        enabled={autoScrollActive}\r\n                        autoScrollSpeed={autoScrollSpeed}\r\n                        onToggle={this.onToggleAutoScroll}\r\n                        onSetSpeed={this.onSetAutoScrollSpeed}\r\n                    />\r\n                </Affix>\r\n            </div>\r\n            <SongContent\r\n                ref={(ref) => this.songContentRef = ref}\r\n                song={song}\r\n                version={selectedVersion}\r\n                onClick={this.onToggleAutoScroll}\r\n            />\r\n            <br/>\r\n            <div>\r\n                <Button\r\n                    onClick={this.goToBeginning}\r\n                >\r\n                    To beginning\r\n                </Button>\r\n                <Button\r\n                    onClick={returnToPrevious}\r\n                >\r\n                    To song selection\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class LoadingIndicator extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absoluteCenter\"\r\n        />\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song } from \"../../datastructures/song\";\r\nimport { SongSelector } from \"./SongSelector\";\r\nimport { DisplaySong } from \"../displaySong/DisplaySong\";\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\"\r\nimport { Button, Layout, Typography, Icon } from \"antd/lib\";\r\n\r\n/**\r\n *\r\n */\r\ninterface Props {}\r\n/**\r\n *\r\n */\r\ninterface State {\r\n    /**\r\n     *\r\n     */\r\n    songList?: SongInfo[];\r\n    /**\r\n     *\r\n     */\r\n    subState:\r\n        {\r\n            id: \"none\"\r\n        } |\r\n        {\r\n            id: \"select-song\"\r\n        } |\r\n        {\r\n            id: \"display-song\",\r\n            partialSongInfo: SongInfo,\r\n            song?: Song,\r\n        };\r\n}\r\n/**\r\n *\r\n */\r\nexport class StartMenu extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        // Read song list.\r\n        fetch(\"content/list.json\")\r\n            .then((r) => r.json())\r\n            .then((songList) => this.setState({ songList }))\r\n            // For development, auto traversal of GUI.\r\n            // .then(() => {\r\n            //     const songList = this.state.songList as SongInfo[]\r\n            //     const partialSongInfo = songList.find((songInfo) => songInfo.name.includes(\"Nice Guy\")) as SongInfo\r\n            //     this.getFullSongInfo(partialSongInfo)\r\n            //         .then((song) => {\r\n            //             this.setState({\r\n            //                 subState: {\r\n            //                     id: \"display-song\",\r\n            //                     partialSongInfo,\r\n            //                     song\r\n            //                 }\r\n            //             })\r\n            //         })\r\n            // })\r\n        this.state = {\r\n            subState: {\r\n                id: \"select-song\"\r\n            },\r\n        };\r\n    }\r\n    getFullSongInfo(partialSongInfo: SongInfo): Promise<Song> {\r\n        return fetch(partialSongInfo.url)\r\n            .then((r) => r.json());\r\n    }\r\n    onClickSelectSong = () => {\r\n        this.setState({\r\n            subState: { id: \"select-song\" },\r\n        });\r\n    }\r\n    onSelectSong = (songInfo: SongInfo) => {\r\n        this.getFullSongInfo(songInfo)\r\n            .then((song) => {\r\n                const { subState } = this.state;\r\n                if (subState.id === \"display-song\") {\r\n                    this.setState({\r\n                        subState: {\r\n                            ...subState,\r\n                            song\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        this.setState({\r\n            subState: {\r\n                id: \"display-song\",\r\n                partialSongInfo: songInfo,\r\n            },\r\n        });\r\n    }\r\n    render() {\r\n        const { songList, subState } = this.state;\r\n        switch (subState.id) {\r\n            case \"none\":\r\n                return <div>\r\n                    <Typography.Title>\r\n                        Tabz for days - React version\r\n                    </Typography.Title>\r\n                    <Button\r\n                        onClick={this.onClickSelectSong}\r\n                    >Select song</Button>\r\n                </div>;\r\n            case \"select-song\":\r\n                return songList ? <SongSelector\r\n                        songList={songList}\r\n                        onSelectSong={this.onSelectSong}\r\n                    ></SongSelector>\r\n                    :\r\n                    <LoadingIndicator/>;\r\n            case \"display-song\":\r\n                return subState.song ? <DisplaySong\r\n                    song={subState.song}\r\n                    returnToPrevious={() => {\r\n                        this.setState({\r\n                            subState: { id: \"select-song\" }\r\n                        })\r\n                    }}\r\n                />\r\n                :\r\n                <LoadingIndicator/>;\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { StartMenu } from \"./components/startMenu/StartMenu\"\r\n\r\nimport \"./styles.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <StartMenu />\r\n    )\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}