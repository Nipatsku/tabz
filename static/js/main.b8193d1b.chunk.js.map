{"version":3,"sources":["components/selectSong/SongList.tsx","components/common/LoadingIndicator.tsx","components/selectSong/SelectSong.tsx","components/displaySong/VersionSelector.tsx","components/displaySong/SongContent.tsx","datastructures/autoScroll.ts","utils.ts","components/displaySong/AutoScrollConfig.tsx","components/displaySong/DisplaySong.tsx","components/NotFound.tsx","index.tsx"],"names":["TreeNode","Tree","SongList","Typography","Text","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSelectTreeNode","selectedKeys","_this$props","songList","onSelectSong","selectedTreeNodeKey","selectedSong","find","songInfo","id","toggleGroupByArtist","groupByArtist","state","setState","localStorage","setItem","localStorageKey_groupByArtist","String","savedValue","getItem","undefined","inherits","createClass","key","value","songsByArtist","react","lib","showIcon","switcherIcon","type","onSelect","map","artistSongs","iArtist","concat","title","artist","length","song","name","songs","_this$props2","searchString","className","defaultChecked","onChange","renderSongTree","mapSongsByArtist","sort","sortArtistsByName","sortSongsByName","renderSongList","item","SearchStringSorter","React","_songSimilarity","toLowerCase","startsWith","includes","_searchString","a","b","aScore","bScore","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","added","_i","_songsByArtist","push","err","return","textA","toUpperCase","textB","SortByName","LoadingIndicator","apply","arguments","size","SelectSong","onSearchSong","history","url","fetch","then","r","json","errorMsg","match","params","message","error","window","scrollTo","_this2","LoadingIndicator_LoadingIndicator","Title","Search","placeholder","e","target","allowClear","SongList_SongList","VersionSelector","defaultSelectedVersion","onSelectVersion","versions","version","i","onClick","SongContent","Paragraph","touchStartTime","touchStartLocation","onDoubleClick","onTouchStart","performance","now","x","changedTouches","clientX","y","clientY","onTouchEnd","tDelta","pDelta","pDeltaDist","Math","sqrt","pow","contentRows","content","split","row","AutoScrollValues","min","max","default","_SongAutoScrollSpeedID","getSongAutoScrollSpeed","savedPreference","Number","duration","saveSongAutoScrollSpeed","autoScrollSpeed","mStorage","storage","lerp","amount","AutoScrollConfig","onSliderChange","onSetSpeed","_sliderValueToAutoScrollSpeed","afterSliderChange","songVersion","enabled","onToggle","mouseEnterDelay","_autoScrollSpeedToSliderValue","marks","defineProperty","onAfterChange","AutoScrollConfig_Text","floor","sliderValue","DisplaySong","scrollDivRef","isCurrentlyMounted","lastAutoScrollUpdate","scrollingFractions","selectedVersionIndex","uri","goToBeginning","animateScroll","scrollToTop","onToggleAutoScroll","autoScrollActive","onSetAutoScrollSpeed","returnToPreviousMenu","updateAutoScroll","tNow","divBounds","getBoundingClientRect","scrollAmount","bottom","top","innerHeight","scrollAmountInteger","scrollAmountFraction","scrollBy","requestAnimationFrame","catch","replace","selectVersionFromProps","clbk","setTimeout","selectedVersion","_this$state","ref","DisplaySong_Title","level","VersionSelector_VersionSelector","offsetTop","AutoScrollConfig_AutoScrollConfig","color","instrument","tuning","SongContent_SongContent","NotFound","NotFound_Text","App","bgUrl","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","react_router_dom","basename","process","react_router","exact","path","component","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.b8193d1b.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { Tree, Icon, List, Typography, Checkbox } from \"antd/lib\"\r\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\r\nconst { TreeNode } = Tree\r\nconst { Text } = Typography\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    searchString?: string\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\ninterface State {\r\n    groupByArtist: boolean\r\n}\r\nexport class SongList extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        // Read 'groupByArtist' preference from localStorage.\r\n        let groupByArtist = true\r\n        if (localStorage) {\r\n            const savedValue = localStorage.getItem(localStorageKey_groupByArtist)\r\n            if (savedValue !== undefined)\r\n                groupByArtist = savedValue === \"true\" ? true : false\r\n        }\r\n        this.state = {\r\n            groupByArtist\r\n        }\r\n    }\r\n    onSelectTreeNode = (selectedKeys: string[]) => {\r\n        const { songList, onSelectSong } = this.props\r\n        const selectedTreeNodeKey = selectedKeys[0]\r\n\r\n        // Check if selected Node was a song.\r\n        const selectedSong = songList.find((songInfo) =>\r\n            songInfo.id === selectedTreeNodeKey\r\n        )\r\n        if (selectedSong)\r\n            onSelectSong(selectedSong)\r\n    }\r\n    toggleGroupByArtist = () => {\r\n        const groupByArtist = !this.state.groupByArtist\r\n        this.setState({\r\n            groupByArtist\r\n        })\r\n        // Save preference to localStorage.\r\n        if (localStorage) {\r\n            localStorage.setItem(localStorageKey_groupByArtist, String(groupByArtist))\r\n        }\r\n    }\r\n    renderSongTree(songsByArtist: SongInfo[][]): JSX.Element {\r\n        return <Tree\r\n            showIcon\r\n            switcherIcon={<Icon type=\"down\" />}\r\n            onSelect={this.onSelectTreeNode}\r\n        >\r\n            {songsByArtist.map((artistSongs, iArtist) => {\r\n                const key = `${iArtist}`\r\n                return <TreeNode\r\n                    key={key}\r\n                    title={`${artistSongs[0].artist} (${artistSongs.length})`}\r\n                >\r\n                    {artistSongs.map((song) =>\r\n                        <TreeNode\r\n                            key={song.id}\r\n                            title={`${song.name}`}\r\n                        />\r\n                    )}\r\n                </TreeNode>\r\n            })}\r\n        </Tree>\r\n    }\r\n    renderSongList(songs: SongInfo[]): JSX.Element {\r\n        return <Tree\r\n            showIcon\r\n            onSelect={this.onSelectTreeNode}\r\n        >\r\n            {songs.map((song) => <TreeNode\r\n                    key={song.id}\r\n                    title={`${song.name} - ${song.artist}`}\r\n            />)}\r\n        </Tree>\r\n    }\r\n    render() {\r\n        const { songList, searchString } = this.props\r\n        const { groupByArtist } = this.state\r\n        return <div>\r\n            <div\r\n                className=\"groupByArtistDiv\"\r\n            >\r\n                <Checkbox\r\n                    defaultChecked={groupByArtist}\r\n                    onChange={this.toggleGroupByArtist}\r\n                >\r\n                    Group by artist\r\n                </Checkbox>\r\n            </div>\r\n            {\r\n                ((searchString === undefined) ? (\r\n                    ((groupByArtist) ? (\r\n                        this.renderSongTree(\r\n                            mapSongsByArtist(songList)\r\n                                .sort(sortArtistsByName)\r\n                                .map((artistSongs) => artistSongs.sort(sortSongsByName))\r\n                        )\r\n                    ) : (\r\n                        this.renderSongList(\r\n                            songList.sort(sortSongsByName)\r\n                        )\r\n                    ))\r\n                ) : (\r\n                    this.renderSongList(\r\n                        songList\r\n                            // Copy Array.\r\n                            .map((item) => item)\r\n                            .sort(SearchStringSorter(searchString))\r\n                    )\r\n                ))\r\n            }\r\n        </div>\r\n    }\r\n}\r\nconst localStorageKey_groupByArtist = \"groupByArtist\"\r\nconst _songSimilarity = (songInfo: SongInfo, searchString: string): number => {\r\n    const name = songInfo.name.toLowerCase()\r\n    const artist = songInfo.artist.toLowerCase()\r\n    return (name.startsWith(searchString)) ?\r\n        4 :\r\n        (artist.startsWith(searchString) ?\r\n            3 :\r\n            (name.includes(searchString) ?\r\n                2 :\r\n                (artist.includes(searchString) ?\r\n                    1 :\r\n                    0\r\n                )\r\n            )\r\n        )\r\n}\r\nconst SearchStringSorter = (_searchString: string) => {\r\n    const searchString = _searchString.toLowerCase()\r\n    return (a: SongInfo, b: SongInfo) => {\r\n        const aScore = _songSimilarity(a, searchString)\r\n        const bScore = _songSimilarity(b, searchString)\r\n        return (aScore < bScore) ? 1 : (aScore > bScore) ? -1 : 0\r\n    }\r\n}\r\nconst mapSongsByArtist = (songs: SongInfo[]): SongInfo[][] => {\r\n    const songsByArtist: SongInfo[][] = []\r\n    for (const song of songs) {\r\n        // Check for existing item with same artist.\r\n        let added = false\r\n        for (const artistSongs of songsByArtist)\r\n            if (artistSongs[0].artist === song.artist) {\r\n                artistSongs.push(song)\r\n                added = true\r\n            }\r\n        if (!added)\r\n            songsByArtist.push([song])\r\n    }\r\n    return songsByArtist\r\n        .sort((a, b) => {\r\n            const textA = a[0].artist.toUpperCase()\r\n            const textB = b[0].artist.toUpperCase()\r\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n        })\r\n}\r\n/**\r\n * Sorter factory for objects with names.\r\n */\r\nconst SortByName = function<T>(name: (o: T) => string) {\r\n    return (a: T, b: T): -1 | 1 | 0 => {\r\n        const textA = name(a).toUpperCase()\r\n        const textB = name(b).toUpperCase()\r\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n    }\r\n}\r\nconst sortSongsByName = SortByName<SongInfo>((songInfo) => songInfo.name)\r\nconst sortArtistsByName = SortByName<SongInfo[]>((artistSongs) => artistSongs[0].artist)\r\n","import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class LoadingIndicator extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absoluteCenter\"\r\n        />\r\n    }\r\n}\r\n","\r\nimport * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { SongList } from \"./SongList\"\r\nimport { Button, Layout, Typography, Icon, Input, message } from \"antd/lib\"\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\";\r\nimport { Navigatable } from \"../common/navigation\"\r\n\r\ninterface Props extends Navigatable<{\r\n    /**\r\n     * Optional error message, in case user was automatically redirected to this view, because of an error.\r\n     */\r\n    errorMsg?: string\r\n}> {}\r\ninterface State {\r\n    songList?: SongInfo[]\r\n    searchString?: string\r\n}\r\nexport class SelectSong extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        // Read song list.\r\n        fetch(\"/content/list.json\")\r\n            .then((r) => r.json())\r\n            .then((songList) => this.setState({ songList }))\r\n            // For development, auto traversal of GUI. OUTDATED, should use history to navigate.\r\n            // .then(() => {\r\n            //     const songList = this.state.songList as SongInfo[]\r\n            //     const partialSongInfo = songList.find((songInfo) => songInfo.name.includes(\"Nice Guy\")) as SongInfo\r\n            //     this.getFullSongInfo(partialSongInfo)\r\n            //         .then((song) => {\r\n            //             this.setState({\r\n            //                 subState: {\r\n            //                     id: \"display-song\",\r\n            //                     partialSongInfo,\r\n            //                     song\r\n            //                 }\r\n            //             })\r\n            //         })\r\n            // })\r\n        const errorMsg = this.props.match.params.errorMsg\r\n        if (errorMsg !== undefined) {\r\n            // Display error message as a popup, that disappears automatically.\r\n            message.error(errorMsg)\r\n        }\r\n        this.state = {}\r\n    }\r\n    componentDidMount() {\r\n        // Scroll to top of page always. TODO: Use decorator?\r\n        window.scrollTo(0, 0)\r\n    }\r\n    onSearchSong = (value: string) => {\r\n        this.setState({\r\n            searchString: value.length > 0 ?\r\n                value : undefined\r\n        })\r\n    }\r\n    onSelectSong = (song: SongInfo) => {\r\n        this.props.history.push(\"/song/\" + `${song.url}`)\r\n    }\r\n    render() {\r\n        const { songList } = this.state\r\n        const { searchString } = this.state\r\n        return songList === undefined ?\r\n            <LoadingIndicator/>\r\n            :\r\n            <div>\r\n                <Typography.Title>Select song ({songList.length})</Typography.Title>\r\n                <Input.Search\r\n                    placeholder=\"Search by artist / song name\"\r\n                    size=\"default\"\r\n                    onChange={(e) => this.onSearchSong(e.target.value)}\r\n                    allowClear={true}\r\n                />\r\n                <SongList\r\n                    songList={songList}\r\n                    searchString={searchString}\r\n                    onSelectSong={this.onSelectSong}\r\n                />\r\n            </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    defaultSelectedVersion: SongVersion\r\n    onSelectVersion: (selectedVersionIndex: number) => void\r\n}\r\ninterface State {}\r\nexport class VersionSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { song, defaultSelectedVersion, onSelectVersion } = this.props\r\n        const { versions } = song\r\n        return <div\r\n            className=\"versionSelector\"\r\n        >\r\n            {versions.length > 1 &&\r\n                <div>\r\n                    {versions.map((version, i) =>\r\n                        <Button\r\n                            key={`${i}`}\r\n                            onClick={() => onSelectVersion(i)}\r\n                            type={version === defaultSelectedVersion ?\r\n                                \"primary\" : \"default\"\r\n                            }\r\n                        >\r\n                            {version.name}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Row, Col } from \"antd/lib\"\r\nconst { Title, Text, Paragraph } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    version: SongVersion\r\n    onClick: () => void\r\n}\r\ninterface State {}\r\ninterface Point {\r\n    x: number\r\n    y: number\r\n}\r\nexport class SongContent extends React.Component<Props, State> {\r\n\r\n    touchStartTime?: number\r\n    touchStartLocation?: Point\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onDoubleClick = () => {\r\n        this.props.onClick()\r\n    }\r\n    onTouchStart = (e: React.TouchEvent) => {\r\n        this.touchStartTime = window.performance.now()\r\n        this.touchStartLocation = {\r\n            x: e.changedTouches[0].clientX,\r\n            y: e.changedTouches[0].clientY\r\n        }\r\n    }\r\n    onTouchEnd = (e: React.TouchEvent) => {\r\n        // Differentiate between pokes and sweeps.\r\n        const tDelta = window.performance.now() - (this.touchStartTime as number)\r\n        const pDelta = {\r\n            x: e.changedTouches[0].clientX - (this.touchStartLocation as Point ).x,\r\n            y: e.changedTouches[0].clientY - (this.touchStartLocation as Point ).y\r\n        }\r\n        const pDeltaDist = Math.sqrt(Math.pow(pDelta.x, 2) + Math.pow(pDelta.y, 2))\r\n        if (tDelta <= 150 && pDeltaDist <= 20) {\r\n            // Poke.\r\n            this.props.onClick()\r\n        }\r\n    }\r\n    render() {\r\n        const { version } = this.props\r\n        const contentRows = version.content.split(\"\\n\")\r\n        return <div\r\n            onDoubleClick={this.onDoubleClick}\r\n            onTouchStart={this.onTouchStart}\r\n            onTouchEnd={this.onTouchEnd}\r\n        >\r\n            {contentRows.map((row, i) =>\r\n                <pre\r\n                    key={i}\r\n                    className=\"songParagraph\"\r\n                >\r\n                    {row}\r\n                </pre>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n","import { SongVersion } from \"./song\";\r\n\r\n/**\r\n * Collection of static AutoScrollSpeed values.\r\n */\r\nexport const AutoScrollValues = {\r\n    /**\r\n     *\r\n     */\r\n    min: 10 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    max: 1 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    default: 3 * 60 as AutoScrollSpeed\r\n}\r\n/**\r\n * Number presents **seconds** that it should take to scroll the whole content from start to end.\r\n */\r\nexport type AutoScrollSpeed = number\r\n/**\r\n *\r\n */\r\nconst _SongAutoScrollSpeedID = (song: SongVersion): string => `ass-${song.id}`\r\n/**\r\n * Get AutoScrollSpeed for a Version of a Song. Included factors are:\r\n * - localStorage\r\n * - SongVersion.duration\r\n * - default AutoScrollSpeed\r\n */\r\nexport const getSongAutoScrollSpeed = (\r\n    song: SongVersion\r\n): AutoScrollSpeed => {\r\n    // Check for saved value in localStorage.\r\n    if (localStorage !== undefined) {\r\n        const savedPreference = localStorage.getItem(_SongAutoScrollSpeedID(song))\r\n        if (savedPreference !== null)\r\n            return Number(savedPreference) as AutoScrollSpeed\r\n    }\r\n    return song.duration !== undefined ?\r\n        song.duration : AutoScrollValues.default\r\n}\r\n/**\r\n * Save AutoScrollSpeed for a Version of a Song.\r\n * @param   song                SongVersion\r\n * @param   autoScrollSpeed     AutoScrollSpeed\r\n * @param   mStorage            Mock interface for *localStorage*\r\n */\r\nexport const saveSongAutoScrollSpeed = (\r\n    song: SongVersion,\r\n    autoScrollSpeed: AutoScrollSpeed,\r\n    mStorage?: Storage | null\r\n) => {\r\n    const storage = (mStorage === undefined) ?\r\n        localStorage :\r\n        mStorage\r\n\r\n    if (! storage)\r\n        // localStorage is not available.\r\n        return\r\n\r\n    storage.setItem(_SongAutoScrollSpeedID(song), String(autoScrollSpeed))\r\n}\r\n","\r\n/**\r\n *\r\n */\r\nexport const lerp = (amount: number, min: number, max: number): number =>\r\n    min + amount * (max - min)\r\n/**\r\n * Pure function for *flattening* Arrays.\r\n */\r\nexport const flatten = <T> (arrayOfArrays: T[][]): T[] => {\r\n    const arr: T[] = []\r\n    const len = arrayOfArrays.length\r\n    for (let i = 0; i < len; i ++) {\r\n        const arr2 = arrayOfArrays[i]\r\n        const len2  = arr2.length\r\n        for (let i2 = 0; i2 < len2; i2 ++)\r\n            arr.push(arr2[len2])\r\n    }\r\n    return arr\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Tooltip, Slider } from \"antd/lib\"\r\nimport { AutoScrollValues, AutoScrollSpeed, saveSongAutoScrollSpeed } from \"../../datastructures/autoScroll\"\r\nimport { SliderValue } from \"antd/lib/slider\";\r\nimport { lerp } from \"../../utils\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    songVersion: SongVersion\r\n    enabled: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n    onToggle: () => void\r\n    onSetSpeed: (autoScrollSpeed: AutoScrollSpeed) => void\r\n}\r\ninterface State {}\r\nexport class AutoScrollConfig extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onSliderChange = (value: SliderValue) => {\r\n        this.props.onSetSpeed(_sliderValueToAutoScrollSpeed(value as number))\r\n    }\r\n    afterSliderChange = (value: SliderValue) => {\r\n        // Save preference.\r\n        saveSongAutoScrollSpeed(\r\n            this.props.songVersion,\r\n            _sliderValueToAutoScrollSpeed(value as number)\r\n        )\r\n    }\r\n    render() {\r\n        const { enabled, autoScrollSpeed, onToggle } = this.props\r\n        return <div>\r\n            <Tooltip\r\n                title=\"Also activated by poking / double-clicking anywhere!\"\r\n                mouseEnterDelay={1}\r\n            >\r\n                <Button\r\n                    onClick={onToggle}\r\n                    type={enabled ? \"primary\" : \"default\"}\r\n                >\r\n                    {`Autoscroll ${ enabled ? \"ON\" : \"OFF\" }`}\r\n                </Button>\r\n            </Tooltip>\r\n            <Slider\r\n                className=\"autoScrollSlider\"\r\n                min={0}\r\n                max={100}\r\n                value={_autoScrollSpeedToSliderValue(autoScrollSpeed)}\r\n                marks={{\r\n                    [_autoScrollSpeedToSliderValue(AutoScrollValues.default)]: \"\"\r\n                }}\r\n                onChange={this.onSliderChange}\r\n                onAfterChange={this.afterSliderChange}\r\n            />\r\n            <div\r\n                className=\"autoScrollValueDiv\"\r\n            >\r\n                <Text\r\n                    className=\"autoScrollValueLabel\"\r\n                >\r\n                    {\r\n                    // tslint:disable-next-line: max-line-length\r\n                    `${Math.floor(autoScrollSpeed / 60)} min ${Math.floor(autoScrollSpeed) % 60 > 0 ? Math.floor(autoScrollSpeed) % 60 + \" sec\" : \"\"}`\r\n                    }\r\n                </Text>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\nconst _autoScrollSpeedToSliderValue = (autoScrollSpeed: AutoScrollSpeed): number => lerp(\r\n    (autoScrollSpeed - AutoScrollValues.min) / (AutoScrollValues.max - AutoScrollValues.min),\r\n    0,\r\n    100\r\n)\r\nconst _sliderValueToAutoScrollSpeed = (sliderValue: number): AutoScrollSpeed => lerp(\r\n    (sliderValue as number) / 100,\r\n    AutoScrollValues.min,\r\n    AutoScrollValues.max\r\n)\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Affix, Tag } from \"antd/lib\"\r\nimport { VersionSelector } from \"./VersionSelector\"\r\nimport { SongContent } from \"./SongContent\"\r\nimport { AutoScrollConfig } from \"./AutoScrollConfig\"\r\nimport { Link, animateScroll } from \"react-scroll\"\r\nimport { AutoScrollSpeed, AutoScrollValues, getSongAutoScrollSpeed } from \"../../datastructures/autoScroll\";\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\";\r\nimport { Navigatable } from \"../common/navigation\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props extends Navigatable<{\r\n    /**\r\n     * Selected song uri.\r\n     */\r\n    uri: string\r\n    /**\r\n     * Selected version index.\r\n     */\r\n    selectedVersionIndex?: number\r\n}> {}\r\ntype State = {} | {\r\n    song: Song\r\n    selectedVersion: SongVersion\r\n    autoScrollActive: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n}\r\nexport class DisplaySong extends React.Component<Props, State> {\r\n\r\n    scrollDivRef?: HTMLDivElement | null\r\n    isCurrentlyMounted: boolean = false\r\n    lastAutoScrollUpdate?: number\r\n    scrollingFractions: number = 0\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        const { uri } = props.match.params\r\n        fetch(`/content/${uri}`)\r\n            .then((r) => r.json())\r\n            .catch(() => {\r\n                // Navigate to start menu, and display error message.\r\n                // TODO: Can we clear navigation history somehow?\r\n                this.props.history.replace(\"/error/\" + `Song not found :(`)\r\n            })\r\n            .then((song: Song | undefined) => {\r\n                if (song !== undefined)\r\n                    this.selectVersionFromProps(song, props)\r\n            })\r\n        this.state = {}\r\n    }\r\n    componentDidMount() {\r\n        this.isCurrentlyMounted = true\r\n        window.requestAnimationFrame = window.requestAnimationFrame ||\r\n            ((clbk: () => void) => setTimeout(clbk, 50))\r\n        window.requestAnimationFrame(this.updateAutoScroll)\r\n\r\n        // Scroll to top of page always. TODO: Use decorator?\r\n        window.scrollTo(0, 0)\r\n    }\r\n    componentWillUnmount() {\r\n        this.isCurrentlyMounted = false\r\n    }\r\n    componentWillReceiveProps(props: Props) {\r\n        if (\"song\" in this.state)\r\n            this.selectVersionFromProps(this.state.song, props)\r\n    }\r\n    selectVersionFromProps(song: Song, props: Props) {\r\n        const { selectedVersionIndex } = props.match.params\r\n        const selectedVersion = song.versions[\r\n            (selectedVersionIndex !== undefined && selectedVersionIndex < song.versions.length) ?\r\n                selectedVersionIndex :\r\n                0\r\n        ]\r\n        this.setState({\r\n            song,\r\n            selectedVersion,\r\n            autoScrollSpeed: getSongAutoScrollSpeed(selectedVersion),\r\n            autoScrollActive: false\r\n        })\r\n    }\r\n    onSelectVersion = (selectedVersionIndex: number) => {\r\n        this.props.history.push(\r\n            `/song/${this.props.match.params.uri}/${selectedVersionIndex}`\r\n        )\r\n    }\r\n    goToBeginning = () => {\r\n        animateScroll.scrollToTop()\r\n    }\r\n    onToggleAutoScroll = () => {\r\n        if (\"autoScrollActive\" in this.state)\r\n            this.setState({\r\n                autoScrollActive: !this.state.autoScrollActive\r\n            })\r\n    }\r\n    onSetAutoScrollSpeed = (autoScrollSpeed: AutoScrollSpeed) => {\r\n        this.setState({\r\n            autoScrollSpeed\r\n        })\r\n    }\r\n    returnToPreviousMenu = () => {\r\n        this.props.history.push(\"/\")\r\n    }\r\n    updateAutoScroll = () => {\r\n        const tNow = window.performance.now()\r\n        if (\r\n            this.isCurrentlyMounted &&\r\n            'autoScrollActive' in this.state &&\r\n            this.state.autoScrollActive &&\r\n            this.scrollDivRef &&\r\n            this.lastAutoScrollUpdate !== undefined\r\n        ) {\r\n            const autoScrollSpeed = this.state.autoScrollSpeed\r\n            const div = this.scrollDivRef\r\n            const divBounds = div.getBoundingClientRect()\r\n            const divHeight = divBounds.bottom - divBounds.top\r\n            const viewPortHeight = window.innerHeight\r\n            const tDelta = (tNow - this.lastAutoScrollUpdate)\r\n            const scrollAmount = (divHeight - viewPortHeight) * tDelta / (autoScrollSpeed * 1000)\r\n                + this.scrollingFractions\r\n\r\n            const scrollAmountInteger = Math.floor(scrollAmount)\r\n            const scrollAmountFraction = scrollAmount - scrollAmountInteger\r\n            this.scrollingFractions = scrollAmountFraction\r\n\r\n            window.scrollBy(0, scrollAmountInteger)\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n        } else {\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n            this.scrollingFractions = 0\r\n        }\r\n\r\n        this.lastAutoScrollUpdate = tNow\r\n    }\r\n    render() {\r\n        if (! (\"song\" in this.state)) {\r\n            return <LoadingIndicator/>\r\n        } else {\r\n            const { song, selectedVersion, autoScrollActive, autoScrollSpeed } = this.state\r\n            return <div\r\n                ref={(ref) => this.scrollDivRef = ref}\r\n            >\r\n                <Title>{song.artist}</Title>\r\n                <Title level={2}>{song.name}</Title>\r\n                <div>\r\n                    <VersionSelector\r\n                        song={song}\r\n                        defaultSelectedVersion={selectedVersion}\r\n                        onSelectVersion={this.onSelectVersion}\r\n                    />\r\n                    <Affix\r\n                        className=\"autoScrollConfigBox\"\r\n                        offsetTop={0}\r\n                    >\r\n                        <AutoScrollConfig\r\n                            songVersion={selectedVersion}\r\n                            enabled={autoScrollActive}\r\n                            autoScrollSpeed={autoScrollSpeed}\r\n                            onToggle={this.onToggleAutoScroll}\r\n                            onSetSpeed={this.onSetAutoScrollSpeed}\r\n                        />\r\n                    </Affix>\r\n                </div>\r\n                <br/>\r\n                <Tag color=\"blue\">{selectedVersion.instrument}</Tag>\r\n                {selectedVersion.instrument === \"guitar\" &&\r\n                    <Tag color=\"volcano\">{selectedVersion.tuning}</Tag>\r\n                }\r\n                <SongContent\r\n                    song={song}\r\n                    version={selectedVersion}\r\n                    onClick={this.onToggleAutoScroll}\r\n                />\r\n                <br/>\r\n                <div>\r\n                    <Button\r\n                        onClick={this.goToBeginning}\r\n                    >\r\n                        To beginning\r\n                    </Button>\r\n                    <Button\r\n                        onClick={this.returnToPreviousMenu}\r\n                    >\r\n                        To song selection\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Typography } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class NotFound extends React.Component<Props, State> {\r\n    render() {\r\n        return <div>\r\n            <Text>Page not found :(</Text>\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\r\nimport { SelectSong } from \"./components/selectSong/SelectSong\"\r\nimport \"./styles.css\";\r\nimport { DisplaySong } from \"./components/displaySong/DisplaySong\";\r\nimport { NotFound } from \"./components/NotFound\"\r\n\r\ninterface Props {}\r\ninterface State {\r\n    bgUrl?: string\r\n}\r\nclass App extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        // fetch(\"bg.png\")\r\n        //     .then((data) => {\r\n        //         this.setState({\r\n        //             bgUrl: data.url\r\n        //         })\r\n        //     })\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { bgUrl } = this.state\r\n        return <div\r\n            style={{\r\n                backgroundImage: bgUrl ? `url(${bgUrl})` : \"\",\r\n                backgroundSize: \"auto 100%\",\r\n                backgroundPosition: \"center\",\r\n                backgroundRepeat: \"no-repeat\"\r\n            }}\r\n        >\r\n            <BrowserRouter\r\n                basename={process.env.PUBLIC_URL}\r\n            >\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={SelectSong}/>\r\n                    <Route path=\"/error/:errorMsg\" component={SelectSong}/>\r\n                    <Route path=\"/song/:uri/:selectedVersionIndex?\" component={DisplaySong}/>\r\n                    <Route component={NotFound}/>\r\n                </Switch>\r\n            </BrowserRouter >\r\n        </div>\r\n    }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}