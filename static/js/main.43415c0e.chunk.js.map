{"version":3,"sources":["components/startMenu/SongList.tsx","components/startMenu/SongSelector.tsx","components/displaySong/VersionSelector.tsx","components/displaySong/SongContent.tsx","datastructures/autoScroll.ts","utils.ts","components/displaySong/AutoScrollConfig.tsx","components/displaySong/DisplaySong.tsx","components/common/LoadingIndicator.tsx","components/startMenu/StartMenu.tsx","index.tsx"],"names":["TreeNode","Tree","SongList","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","onSelectTreeNode","selectedKeys","_this$props","props","songList","onSelectSong","selectedTreeNodeKey","selectedSong","find","songInfo","id","inherits","createClass","key","value","_this$props2","searchString","songsSortedBySearchString","map","item","sort","SearchStringSorter","react","lib","itemLayout","dataSource","renderItem","Item","onClick","Meta","title","artist","name","songsByArtist","mapSongsByArtist","sortArtistsByName","artistSongs","sortSongsByName","showIcon","switcherIcon","type","onSelect","iArtist","song","React","_songSimilarity","toLowerCase","startsWith","includes","_searchString","a","b","aScore","bScore","songs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","added","_i","_songsByArtist","push","err","return","textA","toUpperCase","textB","SortByName","SongSelector","onSearchSong","setState","state","_this2","Title","Search","placeholder","enterButton","size","onChange","e","target","allowClear","SongList_SongList","VersionSelector","Typography","Text","defaultSelectedVersion","onSelectVersion","versions","className","version","i","SongContent","Paragraph","touchStartTime","touchStartLocation","onDoubleClick","onTouchStart","window","performance","now","x","changedTouches","clientX","y","clientY","onTouchEnd","tDelta","pDelta","pDeltaDist","Math","sqrt","pow","contentRows","content","split","row","AutoScrollValues","min","max","default","_SongAutoScrollSpeedID","getSongAutoScrollSpeed","localStorage","savedPreference","getItem","Number","duration","saveSongAutoScrollSpeed","autoScrollSpeed","mStorage","storage","setItem","String","lerp","amount","AutoScrollConfig","onSliderChange","onSetSpeed","_sliderValueToAutoScrollSpeed","afterSliderChange","songVersion","enabled","onToggle","mouseEnterDelay","_autoScrollSpeedToSliderValue","marks","defineProperty","onAfterChange","AutoScrollConfig_Text","floor","sliderValue","DisplaySong","scrollDivRef","isCurrentlyMounted","lastAutoScrollUpdate","scrollingFractions","selectedVersion","goToBeginning","animateScroll","scrollToTop","onToggleAutoScroll","autoScrollActive","onSetAutoScrollSpeed","updateAutoScroll","tNow","divBounds","getBoundingClientRect","divHeight","bottom","top","viewPortHeight","innerHeight","scrollAmount","scrollAmountInteger","scrollAmountFraction","console","log","scrollBy","requestAnimationFrame","clbk","setTimeout","returnToPrevious","_this$state","ref","DisplaySong_Title","level","VersionSelector_VersionSelector","offsetTop","AutoScrollConfig_AutoScrollConfig","color","instrument","tuning","SongContent_SongContent","LoadingIndicator","StartMenu","onClickSelectSong","subState","getFullSongInfo","then","objectSpread","partialSongInfo","fetch","r","json","url","SongSelector_SongSelector","LoadingIndicator_LoadingIndicator","DisplaySong_DisplaySong","App","data","bgUrl","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","StartMenu_StartMenu","rootElement","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.43415c0e.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { Tree, Icon, List } from \"antd/lib\"\r\nconst { TreeNode } = Tree\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    searchString?: string\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\ninterface State {}\r\nexport class SongList extends React.Component<Props, State> {\r\n    onSelectTreeNode = (selectedKeys: string[]) => {\r\n        const { songList, onSelectSong } = this.props\r\n        const selectedTreeNodeKey = selectedKeys[0]\r\n\r\n        // Check if selected Node was a song.\r\n        const selectedSong = songList.find((songInfo) =>\r\n            songInfo.id === selectedTreeNodeKey\r\n        )\r\n        if (selectedSong)\r\n            onSelectSong(selectedSong)\r\n    }\r\n    render() {\r\n        const { songList, searchString, onSelectSong } = this.props\r\n        if (! searchString) {\r\n            const songsByArtist = mapSongsByArtist(songList)\r\n                .sort(sortArtistsByName)\r\n                .map((artistSongs) => artistSongs.sort(sortSongsByName))\r\n            return <Tree\r\n                showIcon\r\n                switcherIcon={<Icon type=\"down\" />}\r\n                onSelect={this.onSelectTreeNode}\r\n            >\r\n                {songsByArtist.map((artistSongs, iArtist) => {\r\n                    const key = `${iArtist}`\r\n                    return <TreeNode\r\n                        key={key}\r\n                        title={`${artistSongs[0].artist} (${artistSongs.length})`}\r\n                        // icon= TODO\r\n                    >\r\n                        {artistSongs.map((song) =>\r\n                            <TreeNode\r\n                                key={song.id}\r\n                                title={song.name}\r\n                            />\r\n                        )}\r\n                    </TreeNode>\r\n                })}\r\n            </Tree>\r\n        } else {\r\n            const songsSortedBySearchString = songList\r\n                // Copy Array.\r\n                .map((item) => item)\r\n                .sort(SearchStringSorter(searchString))\r\n            return <List\r\n                itemLayout=\"horizontal\"\r\n                dataSource={songsSortedBySearchString}\r\n                renderItem={(songInfo) => (\r\n                    <List.Item\r\n                        onClick={() => onSelectSong(songInfo)}\r\n                    >\r\n                        <List.Item.Meta\r\n                            title={`${songInfo.artist} - ${songInfo.name}`}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        }\r\n    }\r\n}\r\nconst _songSimilarity = (songInfo: SongInfo, searchString: string): number => {\r\n    const name = songInfo.name.toLowerCase()\r\n    const artist = songInfo.artist.toLowerCase()\r\n    return (name.startsWith(searchString) || artist.startsWith(searchString)) ?\r\n            1 :\r\n            (name.includes(searchString) || artist.includes(searchString) ?\r\n                0.5 :\r\n                0\r\n            )\r\n}\r\nconst SearchStringSorter = (_searchString: string) => {\r\n    const searchString = _searchString.toLowerCase()\r\n    return (a: SongInfo, b: SongInfo) => {\r\n        const aScore = _songSimilarity(a, searchString)\r\n        const bScore = _songSimilarity(b, searchString)\r\n        return (aScore < bScore) ? 1 : (aScore > bScore) ? -1 : 0\r\n    }\r\n}\r\nconst mapSongsByArtist = (songs: SongInfo[]): SongInfo[][] => {\r\n    const songsByArtist: SongInfo[][] = []\r\n    for (const song of songs) {\r\n        // Check for existing item with same artist.\r\n        let added = false\r\n        for (const artistSongs of songsByArtist)\r\n            if (artistSongs[0].artist === song.artist) {\r\n                artistSongs.push(song)\r\n                added = true\r\n            }\r\n        if (!added)\r\n            songsByArtist.push([song])\r\n    }\r\n    return songsByArtist\r\n        .sort((a, b) => {\r\n            const textA = a[0].artist.toUpperCase()\r\n            const textB = b[0].artist.toUpperCase()\r\n            return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n        })\r\n}\r\n/**\r\n * Sorter factory for objects with names.\r\n */\r\nconst SortByName = function<T>(name: (o: T) => string) {\r\n    return (a: T, b: T): -1 | 1 | 0 => {\r\n        const textA = name(a).toUpperCase()\r\n        const textB = name(b).toUpperCase()\r\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0\r\n    }\r\n}\r\nconst sortSongsByName = SortByName<SongInfo>((songInfo) => songInfo.name)\r\nconst sortArtistsByName = SortByName<SongInfo[]>((artistSongs) => artistSongs[0].artist)\r\n","\r\nimport * as React from \"react\";\r\nimport { SongInfo } from \"../../datastructures/song\"\r\nimport { SongList } from \"./SongList\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\n\r\ninterface Props {\r\n    songList: SongInfo[]\r\n    onSelectSong: (songInfo: SongInfo) => void\r\n}\r\ninterface State {\r\n    searchString?: string\r\n}\r\nexport class SongSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onSearchSong = (value: string) => {\r\n        this.setState({\r\n            searchString: value.length > 0 ?\r\n                value : undefined\r\n        })\r\n    }\r\n    render() {\r\n        const { songList, onSelectSong } = this.props\r\n        const { searchString } = this.state\r\n        return <div>\r\n            <Typography.Title>Select song ({songList.length})</Typography.Title>\r\n            <Input.Search\r\n                placeholder=\"Search text\"\r\n                enterButton=\"Search\"\r\n                size=\"default\"\r\n                onChange={(e) => this.onSearchSong(e.target.value)}\r\n                allowClear={true}\r\n            />\r\n            <SongList\r\n                songList={songList}\r\n                searchString={searchString}\r\n                onSelectSong={onSelectSong}\r\n            />\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input } from \"antd/lib\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    defaultSelectedVersion: SongVersion\r\n    onSelectVersion: (version: SongVersion) => void\r\n}\r\ninterface State {}\r\nexport class VersionSelector extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { song, defaultSelectedVersion, onSelectVersion } = this.props\r\n        const { versions } = song\r\n        return <div\r\n            className=\"versionSelector\"\r\n        >\r\n            {versions.length > 1 &&\r\n                <div>\r\n                    {versions.map((version, i) =>\r\n                        <Button\r\n                            key={`${i}`}\r\n                            onClick={() => onSelectVersion(version)}\r\n                            type={version === defaultSelectedVersion ?\r\n                                \"primary\" : \"default\"\r\n                            }\r\n                        >\r\n                            {version.name}\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Row, Col } from \"antd/lib\"\r\nconst { Title, Text, Paragraph } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    version: SongVersion\r\n    onClick: () => void\r\n}\r\ninterface State {}\r\ninterface Point {\r\n    x: number\r\n    y: number\r\n}\r\nexport class SongContent extends React.Component<Props, State> {\r\n\r\n    touchStartTime?: number\r\n    touchStartLocation?: Point\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onDoubleClick = () => {\r\n        this.props.onClick()\r\n    }\r\n    onTouchStart = (e: React.TouchEvent) => {\r\n        this.touchStartTime = window.performance.now()\r\n        this.touchStartLocation = {\r\n            x: e.changedTouches[0].clientX,\r\n            y: e.changedTouches[0].clientY\r\n        }\r\n    }\r\n    onTouchEnd = (e: React.TouchEvent) => {\r\n        // Differentiate between pokes and sweeps.\r\n        const tDelta = window.performance.now() - (this.touchStartTime as number)\r\n        const pDelta = {\r\n            x: e.changedTouches[0].clientX - (this.touchStartLocation as Point ).x,\r\n            y: e.changedTouches[0].clientY - (this.touchStartLocation as Point ).y\r\n        }\r\n        const pDeltaDist = Math.sqrt(Math.pow(pDelta.x, 2) + Math.pow(pDelta.y, 2))\r\n        if (tDelta <= 150 && pDeltaDist <= 20) {\r\n            // Poke.\r\n            this.props.onClick()\r\n        }\r\n    }\r\n    render() {\r\n        const { version } = this.props\r\n        const contentRows = version.content.split(\"\\n\")\r\n        return <div\r\n            onDoubleClick={this.onDoubleClick}\r\n            onTouchStart={this.onTouchStart}\r\n            onTouchEnd={this.onTouchEnd}\r\n        >\r\n            {contentRows.map((row, i) =>\r\n                <pre\r\n                    key={i}\r\n                    className=\"songParagraph\"\r\n                >\r\n                    {row}\r\n                </pre>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n","import { SongVersion } from \"./song\";\r\n\r\n/**\r\n * Collection of static AutoScrollSpeed values.\r\n */\r\nexport const AutoScrollValues = {\r\n    /**\r\n     *\r\n     */\r\n    min: 10 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    max: 1 * 60 as AutoScrollSpeed,\r\n    /**\r\n     *\r\n     */\r\n    default: 3 * 60 as AutoScrollSpeed\r\n}\r\n/**\r\n * Number presents **seconds** that it should take to scroll the whole content from start to end.\r\n */\r\nexport type AutoScrollSpeed = number\r\n/**\r\n *\r\n */\r\nconst _SongAutoScrollSpeedID = (song: SongVersion): string => `ass-${song.id}`\r\n/**\r\n * Get AutoScrollSpeed for a Version of a Song. Included factors are:\r\n * - localStorage\r\n * - SongVersion.duration\r\n * - default AutoScrollSpeed\r\n */\r\nexport const getSongAutoScrollSpeed = (\r\n    song: SongVersion\r\n): AutoScrollSpeed => {\r\n    // Check for saved value in localStorage.\r\n    if (localStorage !== undefined) {\r\n        const savedPreference = localStorage.getItem(_SongAutoScrollSpeedID(song))\r\n        if (savedPreference !== null)\r\n            return Number(savedPreference) as AutoScrollSpeed\r\n    }\r\n    return song.duration !== undefined ?\r\n        song.duration : AutoScrollValues.default\r\n}\r\n/**\r\n * Save AutoScrollSpeed for a Version of a Song.\r\n * @param   song                SongVersion\r\n * @param   autoScrollSpeed     AutoScrollSpeed\r\n * @param   mStorage            Mock interface for *localStorage*\r\n */\r\nexport const saveSongAutoScrollSpeed = (\r\n    song: SongVersion,\r\n    autoScrollSpeed: AutoScrollSpeed,\r\n    mStorage?: Storage | null\r\n) => {\r\n    const storage = (mStorage === undefined) ?\r\n        localStorage :\r\n        mStorage\r\n\r\n    if (! storage)\r\n        // localStorage is not available.\r\n        return\r\n\r\n    storage.setItem(_SongAutoScrollSpeedID(song), String(autoScrollSpeed))\r\n}\r\n","\r\n/**\r\n *\r\n */\r\nexport const lerp = (amount: number, min: number, max: number): number =>\r\n    min + amount * (max - min)\r\n/**\r\n * Pure function for *flattening* Arrays.\r\n */\r\nexport const flatten = <T> (arrayOfArrays: T[][]): T[] => {\r\n    const arr: T[] = []\r\n    const len = arrayOfArrays.length\r\n    for (let i = 0; i < len; i ++) {\r\n        const arr2 = arrayOfArrays[i]\r\n        const len2  = arr2.length\r\n        for (let i2 = 0; i2 < len2; i2 ++)\r\n            arr.push(arr2[len2])\r\n    }\r\n    return arr\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Tooltip, Slider } from \"antd/lib\"\r\nimport { AutoScrollValues, AutoScrollSpeed, saveSongAutoScrollSpeed } from \"../../datastructures/autoScroll\"\r\nimport { SliderValue } from \"antd/lib/slider\";\r\nimport { lerp } from \"../../utils\"\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    songVersion: SongVersion\r\n    enabled: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n    onToggle: () => void\r\n    onSetSpeed: (autoScrollSpeed: AutoScrollSpeed) => void\r\n}\r\ninterface State {}\r\nexport class AutoScrollConfig extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n    onSliderChange = (value: SliderValue) => {\r\n        this.props.onSetSpeed(_sliderValueToAutoScrollSpeed(value as number))\r\n    }\r\n    afterSliderChange = (value: SliderValue) => {\r\n        // Save preference.\r\n        saveSongAutoScrollSpeed(\r\n            this.props.songVersion,\r\n            _sliderValueToAutoScrollSpeed(value as number)\r\n        )\r\n    }\r\n    render() {\r\n        const { enabled, autoScrollSpeed, onToggle } = this.props\r\n        return <div>\r\n            <Tooltip\r\n                title=\"Also activated by poking / double-clicking anywhere!\"\r\n                mouseEnterDelay={1}\r\n            >\r\n                <Button\r\n                    onClick={onToggle}\r\n                    type={enabled ? \"primary\" : \"default\"}\r\n                >\r\n                    {`Autoscroll ${ enabled ? \"ON\" : \"OFF\" }`}\r\n                </Button>\r\n            </Tooltip>\r\n            <Slider\r\n                className=\"autoScrollSlider\"\r\n                min={0}\r\n                max={100}\r\n                value={_autoScrollSpeedToSliderValue(autoScrollSpeed)}\r\n                marks={{\r\n                    [_autoScrollSpeedToSliderValue(AutoScrollValues.default)]: \"\"\r\n                }}\r\n                onChange={this.onSliderChange}\r\n                onAfterChange={this.afterSliderChange}\r\n            />\r\n            <Text\r\n                className=\"autoScrollValueLabel\"\r\n            >\r\n                {\r\n                // tslint:disable-next-line: max-line-length\r\n                `${Math.floor(autoScrollSpeed / 60)} min ${Math.floor(autoScrollSpeed) % 60 > 0 ? Math.floor(autoScrollSpeed) % 60 + \" sec\" : \"\"}`\r\n                }\r\n            </Text>\r\n        </div>\r\n    }\r\n}\r\nconst _autoScrollSpeedToSliderValue = (autoScrollSpeed: AutoScrollSpeed): number => lerp(\r\n    (autoScrollSpeed - AutoScrollValues.min) / (AutoScrollValues.max - AutoScrollValues.min),\r\n    0,\r\n    100\r\n)\r\nconst _sliderValueToAutoScrollSpeed = (sliderValue: number): AutoScrollSpeed => lerp(\r\n    (sliderValue as number) / 100,\r\n    AutoScrollValues.min,\r\n    AutoScrollValues.max\r\n)\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song, SongVersion } from \"../../datastructures/song\"\r\nimport { Button, Layout, Typography, Icon, Input, Affix, Tag } from \"antd/lib\"\r\nimport { VersionSelector } from \"./VersionSelector\"\r\nimport { SongContent } from \"./SongContent\"\r\nimport { AutoScrollConfig } from \"./AutoScrollConfig\"\r\nimport { Link, animateScroll } from \"react-scroll\"\r\nimport { AutoScrollSpeed, AutoScrollValues, getSongAutoScrollSpeed } from \"../../datastructures/autoScroll\";\r\nconst { Title, Text } = Typography\r\n\r\ninterface Props {\r\n    song: Song\r\n    returnToPrevious: () => void\r\n}\r\ninterface State {\r\n    selectedVersion: SongVersion\r\n    autoScrollActive: boolean\r\n    autoScrollSpeed: AutoScrollSpeed\r\n}\r\nexport class DisplaySong extends React.Component<Props, State> {\r\n\r\n    scrollDivRef?: HTMLDivElement | null\r\n    isCurrentlyMounted: boolean = false\r\n    lastAutoScrollUpdate?: number\r\n    scrollingFractions: number = 0\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        const selectedVersion = this.props.song.versions[0]\r\n        this.state = {\r\n            selectedVersion,\r\n            autoScrollActive: false,\r\n            autoScrollSpeed: getSongAutoScrollSpeed(selectedVersion)\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.isCurrentlyMounted = true\r\n        window.requestAnimationFrame = window.requestAnimationFrame ||\r\n            ((clbk: () => void) => window.setTimeout(clbk, 50))\r\n        window.requestAnimationFrame(this.updateAutoScroll)\r\n    }\r\n    componentWillUnmount() {\r\n        this.isCurrentlyMounted = false\r\n    }\r\n    onSelectVersion = (selectedVersion: SongVersion) => {\r\n        this.setState({\r\n            selectedVersion,\r\n            autoScrollSpeed: getSongAutoScrollSpeed(selectedVersion)\r\n        })\r\n    }\r\n    goToBeginning = () => {\r\n        animateScroll.scrollToTop()\r\n    }\r\n    onToggleAutoScroll = () => {\r\n        this.setState({\r\n            autoScrollActive: !this.state.autoScrollActive\r\n        })\r\n    }\r\n    onSetAutoScrollSpeed = (autoScrollSpeed: AutoScrollSpeed) => {\r\n        this.setState({\r\n            autoScrollSpeed\r\n        })\r\n    }\r\n    updateAutoScroll = () => {\r\n        if (!this.isCurrentlyMounted)\r\n            return\r\n\r\n        const tNow = window.performance.now()\r\n        if (\r\n            this.state.autoScrollActive &&\r\n            this.scrollDivRef &&\r\n            this.lastAutoScrollUpdate !== undefined\r\n        ) {\r\n            const { autoScrollSpeed } = this.state\r\n            const div = this.scrollDivRef\r\n            const divBounds = div.getBoundingClientRect()\r\n            const divHeight = divBounds.bottom - divBounds.top\r\n            const viewPortHeight = window.innerHeight\r\n            const tDelta = (tNow - this.lastAutoScrollUpdate)\r\n            const scrollAmount = (divHeight - viewPortHeight) * tDelta / (autoScrollSpeed * 1000)\r\n                + this.scrollingFractions\r\n\r\n            const scrollAmountInteger = Math.floor(scrollAmount)\r\n            const scrollAmountFraction = scrollAmount - scrollAmountInteger\r\n            this.scrollingFractions = scrollAmountFraction\r\n            console.log(tDelta, autoScrollSpeed, scrollAmountInteger, \"     \", divHeight, viewPortHeight)\r\n\r\n            window.scrollBy(0, scrollAmountInteger)\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n        } else {\r\n            window.requestAnimationFrame(this.updateAutoScroll)\r\n            this.scrollingFractions = 0\r\n        }\r\n\r\n        this.lastAutoScrollUpdate = tNow\r\n    }\r\n    render() {\r\n        const { song, returnToPrevious } = this.props\r\n        const { selectedVersion, autoScrollActive, autoScrollSpeed } = this.state\r\n        return <div\r\n            ref={(ref) => this.scrollDivRef = ref}\r\n        >\r\n            <Title>{song.artist}</Title>\r\n            <Title level={2}>{song.name}</Title>\r\n            <div>\r\n                <VersionSelector\r\n                    song={song}\r\n                    defaultSelectedVersion={selectedVersion}\r\n                    onSelectVersion={this.onSelectVersion}\r\n                />\r\n                <Affix\r\n                    className=\"autoScrollConfigBox\"\r\n                    offsetTop={0}\r\n                >\r\n                    <AutoScrollConfig\r\n                        songVersion={selectedVersion}\r\n                        enabled={autoScrollActive}\r\n                        autoScrollSpeed={autoScrollSpeed}\r\n                        onToggle={this.onToggleAutoScroll}\r\n                        onSetSpeed={this.onSetAutoScrollSpeed}\r\n                    />\r\n                </Affix>\r\n            </div>\r\n            <br/>\r\n            <Tag color=\"blue\">{selectedVersion.instrument}</Tag>\r\n            {selectedVersion.instrument === \"guitar\" &&\r\n                <Tag color=\"volcano\">{selectedVersion.tuning}</Tag>\r\n            }\r\n            <SongContent\r\n                song={song}\r\n                version={selectedVersion}\r\n                onClick={this.onToggleAutoScroll}\r\n            />\r\n            <br/>\r\n            <div>\r\n                <Button\r\n                    onClick={this.goToBeginning}\r\n                >\r\n                    To beginning\r\n                </Button>\r\n                <Button\r\n                    onClick={returnToPrevious}\r\n                >\r\n                    To song selection\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Spin } from \"antd/lib\"\r\n\r\ninterface Props {}\r\ninterface State {}\r\nexport class LoadingIndicator extends React.Component<Props, State> {\r\n    render() {\r\n        return <Spin\r\n            size=\"large\"\r\n            className=\"absoluteCenter\"\r\n        />\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SongInfo, Song } from \"../../datastructures/song\";\r\nimport { SongSelector } from \"./SongSelector\";\r\nimport { DisplaySong } from \"../displaySong/DisplaySong\";\r\nimport { LoadingIndicator } from \"../common/LoadingIndicator\"\r\nimport { Button, Layout, Typography, Icon } from \"antd/lib\";\r\n\r\n/**\r\n *\r\n */\r\ninterface Props {}\r\n/**\r\n *\r\n */\r\ninterface State {\r\n    /**\r\n     *\r\n     */\r\n    songList?: SongInfo[];\r\n    /**\r\n     *\r\n     */\r\n    subState:\r\n        {\r\n            id: \"none\"\r\n        } |\r\n        {\r\n            id: \"select-song\"\r\n        } |\r\n        {\r\n            id: \"display-song\",\r\n            partialSongInfo: SongInfo,\r\n            song?: Song,\r\n        };\r\n}\r\n/**\r\n *\r\n */\r\nexport class StartMenu extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        // Read song list.\r\n        fetch(\"content/list.json\")\r\n            .then((r) => r.json())\r\n            .then((songList) => this.setState({ songList }))\r\n            // For development, auto traversal of GUI.\r\n            .then(() => {\r\n                const songList = this.state.songList as SongInfo[]\r\n                const partialSongInfo = songList.find((songInfo) => songInfo.name.includes(\"Nice Guy\")) as SongInfo\r\n                this.getFullSongInfo(partialSongInfo)\r\n                    .then((song) => {\r\n                        this.setState({\r\n                            subState: {\r\n                                id: \"display-song\",\r\n                                partialSongInfo,\r\n                                song\r\n                            }\r\n                        })\r\n                    })\r\n            })\r\n        this.state = {\r\n            subState: {\r\n                id: \"select-song\"\r\n            },\r\n        };\r\n    }\r\n    getFullSongInfo(partialSongInfo: SongInfo): Promise<Song> {\r\n        return fetch(partialSongInfo.url)\r\n            .then((r) => r.json());\r\n    }\r\n    onClickSelectSong = () => {\r\n        this.setState({\r\n            subState: { id: \"select-song\" },\r\n        });\r\n    }\r\n    onSelectSong = (songInfo: SongInfo) => {\r\n        this.getFullSongInfo(songInfo)\r\n            .then((song) => {\r\n                const { subState } = this.state;\r\n                if (subState.id === \"display-song\") {\r\n                    this.setState({\r\n                        subState: {\r\n                            ...subState,\r\n                            song\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        this.setState({\r\n            subState: {\r\n                id: \"display-song\",\r\n                partialSongInfo: songInfo,\r\n            },\r\n        });\r\n    }\r\n    render() {\r\n        const { songList, subState } = this.state;\r\n        switch (subState.id) {\r\n            case \"none\":\r\n                return <div>\r\n                    <Typography.Title>\r\n                        Tabz for days - React version\r\n                    </Typography.Title>\r\n                    <Button\r\n                        onClick={this.onClickSelectSong}\r\n                    >Select song</Button>\r\n                </div>;\r\n            case \"select-song\":\r\n                return songList ? <SongSelector\r\n                        songList={songList}\r\n                        onSelectSong={this.onSelectSong}\r\n                    ></SongSelector>\r\n                    :\r\n                    <LoadingIndicator/>;\r\n            case \"display-song\":\r\n                return subState.song ? <DisplaySong\r\n                    song={subState.song}\r\n                    returnToPrevious={() => {\r\n                        this.setState({\r\n                            subState: { id: \"select-song\" }\r\n                        })\r\n                    }}\r\n                />\r\n                :\r\n                <LoadingIndicator/>;\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { StartMenu } from \"./components/startMenu/StartMenu\"\r\n\r\nimport \"./styles.css\";\r\nimport { url } from \"inspector\";\r\n\r\ninterface Props {}\r\ninterface State {\r\n    bgUrl?: string\r\n}\r\nclass App extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        fetch(\"bg.png\")\r\n            .then((data) => {\r\n                this.setState({\r\n                    // bgUrl: data.url\r\n                })\r\n            })\r\n        this.state = {}\r\n    }\r\n    render() {\r\n        const { bgUrl } = this.state\r\n        return <div\r\n            style={{\r\n                backgroundImage: bgUrl ? `url(${bgUrl})` : \"\",\r\n                backgroundSize: \"auto 100%\",\r\n                backgroundPosition: \"center\",\r\n                backgroundRepeat: \"no-repeat\"\r\n            }}\r\n        >\r\n            <StartMenu />\r\n        </div>\r\n    }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n"],"sourceRoot":""}